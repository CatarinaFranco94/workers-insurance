[INFO ] 2020-07-12T15:22:54,262Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-12T15:22:54,631Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:22:57,304Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:23:00,406Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-12T15:23:00,428Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:23:00,429Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:23:01,343Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:23:01,396Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-12T15:23:02,168Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:23:02,190Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:23:02,190Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-12T15:23:02,442Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:23:02,464Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:23:03,284Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-12T15:23:03,895Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:23:03,905Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:23:03,969Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:23:03,970Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:23:03,970Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:23:05,390Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:23:05,390Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-12T15:23:05,607Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:23:05,607Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-12T15:23:05,705Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:23:05,705Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-12T15:23:05,770Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:23:05,770Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:23:06,031Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,116Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:23:06,193Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:23:06,476Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:23:06,476Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:23:06,531Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:23:06,629Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-12T15:23:06,629Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:23:06,693Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,693Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-12T15:23:06,704Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,704Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-12T15:23:06,704Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,704Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:06,748Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-12T15:23:06,791Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:06,791Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:23:06,813Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:06,813Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:23:06,813Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:06,813Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:23:06,813Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:06,813Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,814Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-12T15:23:06,848Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,859Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:23:06,892Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:23:06,947Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:23:06,947Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:23:06,947Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:23:06,947Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-12T15:23:06,947Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:23:06,958Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,958Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-12T15:23:06,969Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,970Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-12T15:23:06,970Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:06,970Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:06,970Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-12T15:23:07,004Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:07,004Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:23:07,004Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:07,004Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:23:07,015Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:07,016Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:23:07,016Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:07,016Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:23:07,016Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:23:07,016Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:07,016Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-12T15:23:10,240Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:23:10,273Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:23:10,274Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-12T15:23:10,274Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:23:10,286Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:23:10,362Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-12T15:23:10,363Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:23:10,465Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-12T15:23:18,554Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-152252.114\nodes\0\cordapps] {}
[INFO ] 2020-07-12T15:23:18,575Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:23:18,604Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:23:19,105Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:23:20,953Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:23:21,328Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:23:21,408Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:23:21,556Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:23:21,557Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:23:22,836Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:22:51.961Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:23:30,017Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:30,022Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-152252.114\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:30,022Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:30,086Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:30,225Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:30,232Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:33,746Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:34,886Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:34,890Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:34,899Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:34,899Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:35,077Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:35,144Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:23:35,174Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:23:35,174Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:23:35,699Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:23:35,714Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:23:35,714Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567415714) {}
[INFO ] 2020-07-12T15:23:35,722Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:23:35,966Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567415714) {}
[INFO ] 2020-07-12T15:23:36,196Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:23:36,257Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:23:36,260Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:23:36,333Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567415714) {}
[INFO ] 2020-07-12T15:23:36,441Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:23:36,511Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=E7F3D880C62E6D1BE02F1B61B3DD95B27E999E1C79E1691B85C6B367BAAC9C8A uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:23:36,524Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-12T15:23:36,529Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-12T15:23:37,331Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567415714) {}
[INFO ] 2020-07-12T15:23:37,516Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567415714) {}
[INFO ] 2020-07-12T15:23:37,526Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:23:37,529Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567415714) {}
[INFO ] 2020-07-12T15:23:37,529Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:23:37,584Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-152252.114\nodes\1\cordapps] {}
[INFO ] 2020-07-12T15:23:37,587Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:23:37,588Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:23:37,973Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:23:38,025Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:23:38,027Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:23:38,030Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:23:38,116Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:23:38,116Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:23:38,124Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:22:51.961Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:23:39,065Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,068Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-152252.114\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,068Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,097Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,101Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,101Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,268Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,283Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,285Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,289Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,289Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,369Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:39,378Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:23:39,383Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:23:39,383Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:23:39,617Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:23:39,620Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:23:39,681Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:23:39,681Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567419681) {}
[INFO ] 2020-07-12T15:23:39,684Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:23:39,694Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567419681) {}
[INFO ] 2020-07-12T15:23:39,707Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:23:39,708Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:23:39,708Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:23:39,727Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567419681) {}
[INFO ] 2020-07-12T15:23:39,734Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:23:39,817Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=E7F3D880C62E6D1BE02F1B61B3DD95B27E999E1C79E1691B85C6B367BAAC9C8A uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:23:39,828Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567419681) {}
[INFO ] 2020-07-12T15:23:39,833Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567415714) {}
[INFO ] 2020-07-12T15:23:39,836Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:23:39,851Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567419681) {}
[INFO ] 2020-07-12T15:23:39,854Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:23:39,869Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567419681) {}
[INFO ] 2020-07-12T15:23:39,869Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:23:39,870Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567419681) {}
[INFO ] 2020-07-12T15:23:39,870Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:23:39,889Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-152252.114\nodes\2\cordapps] {}
[INFO ] 2020-07-12T15:23:39,891Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:23:39,891Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:23:40,189Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-152252.114/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:23:40,279Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:23:40,281Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:23:40,283Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:23:40,353Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:23:40,353Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:23:40,359Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:22:51.961Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:23:41,228Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,231Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-152252.114\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,231Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,259Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,265Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,265Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,400Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,411Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,413Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,417Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:41,417Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:42,041Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:23:42,049Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:23:42,052Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:23:42,052Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:23:42,214Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:23:42,216Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:23:42,258Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:23:42,258Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567422258) {}
[INFO ] 2020-07-12T15:23:42,260Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:23:42,268Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567422258) {}
[INFO ] 2020-07-12T15:23:42,277Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:23:42,277Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:23:42,277Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:23:42,289Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567422258) {}
[INFO ] 2020-07-12T15:23:42,296Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:23:42,335Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=E7F3D880C62E6D1BE02F1B61B3DD95B27E999E1C79E1691B85C6B367BAAC9C8A uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:23:42,349Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567422258) {}
[INFO ] 2020-07-12T15:23:42,353Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567415714) {}
[INFO ] 2020-07-12T15:23:42,356Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:23:42,371Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567422258) {}
[INFO ] 2020-07-12T15:23:42,373Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:23:42,386Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567419681) {}
[INFO ] 2020-07-12T15:23:42,388Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:23:42,399Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567422258) {}
[INFO ] 2020-07-12T15:23:42,401Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:23:42,412Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567422258) {}
[INFO ] 2020-07-12T15:23:42,412Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:23:42,413Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567422258) {}
[INFO ] 2020-07-12T15:23:42,413Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-12T15:23:42,935Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=27750d7c-1463-4017-b74c-06e62d0c4505, invocation_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, invocation_timestamp=2020-07-12T15:23:42.472Z, origin=Only For Testing, session_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, session_timestamp=2020-07-12T15:23:42.472Z, thread-id=226}
[WARN ] 2020-07-12T15:23:42,935Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.examples.workinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=27750d7c-1463-4017-b74c-06e62d0c4505, invocation_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, invocation_timestamp=2020-07-12T15:23:42.472Z, origin=Only For Testing, session_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, session_timestamp=2020-07-12T15:23:42.472Z, thread-id=226}
[INFO ] 2020-07-12T15:23:43,865Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=27750d7c-1463-4017-b74c-06e62d0c4505, invocation_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, invocation_timestamp=2020-07-12T15:23:42.472Z, origin=Only For Testing, session_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, session_timestamp=2020-07-12T15:23:42.472Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:43,865Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=27750d7c-1463-4017-b74c-06e62d0c4505, invocation_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, invocation_timestamp=2020-07-12T15:23:42.472Z, origin=Only For Testing, session_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, session_timestamp=2020-07-12T15:23:42.472Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:44,060Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=27750d7c-1463-4017-b74c-06e62d0c4505, invocation_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, invocation_timestamp=2020-07-12T15:23:42.472Z, origin=Only For Testing, session_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, session_timestamp=2020-07-12T15:23:42.472Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:44,355Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=afe2198d-e9e3-4175-af96-a10a167f7248, invocation_id=f0bd8718-2c0d-4e83-a099-37b7a88028ec, invocation_timestamp=2020-07-12T15:23:44.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=f0bd8718-2c0d-4e83-a099-37b7a88028ec, session_timestamp=2020-07-12T15:23:44.273Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:44,450Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=afe2198d-e9e3-4175-af96-a10a167f7248, invocation_id=f0bd8718-2c0d-4e83-a099-37b7a88028ec, invocation_timestamp=2020-07-12T15:23:44.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=f0bd8718-2c0d-4e83-a099-37b7a88028ec, session_timestamp=2020-07-12T15:23:44.273Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:44,459Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=afe2198d-e9e3-4175-af96-a10a167f7248, invocation_id=f0bd8718-2c0d-4e83-a099-37b7a88028ec, invocation_timestamp=2020-07-12T15:23:44.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=f0bd8718-2c0d-4e83-a099-37b7a88028ec, session_timestamp=2020-07-12T15:23:44.273Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:44,474Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=afe2198d-e9e3-4175-af96-a10a167f7248, invocation_id=f0bd8718-2c0d-4e83-a099-37b7a88028ec, invocation_timestamp=2020-07-12T15:23:44.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=f0bd8718-2c0d-4e83-a099-37b7a88028ec, session_timestamp=2020-07-12T15:23:44.273Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:44,533Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=27750d7c-1463-4017-b74c-06e62d0c4505, invocation_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, invocation_timestamp=2020-07-12T15:23:42.472Z, origin=Only For Testing, session_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, session_timestamp=2020-07-12T15:23:42.472Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:44,533Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=27750d7c-1463-4017-b74c-06e62d0c4505, invocation_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, invocation_timestamp=2020-07-12T15:23:42.472Z, origin=Only For Testing, session_id=ad4e5ec5-4f24-46fb-83d9-9307cbe65e3e, session_timestamp=2020-07-12T15:23:42.472Z, thread-id=226, tx_id=8FFFE086DC85FDA8B97ECFA9B9704D9E2684136BF84D8D03FA907CA039E8E30A}
[INFO ] 2020-07-12T15:23:44,554Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-12T15:23:44,600Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-12T15:23:44,609Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-12T15:31:41,209Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-12T15:31:41,880Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:31:45,342Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:31:48,177Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-12T15:31:48,201Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:31:48,202Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:31:49,191Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:31:49,223Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-12T15:31:49,917Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:31:49,946Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:31:49,946Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-12T15:31:50,254Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:31:50,276Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:31:51,058Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-12T15:31:51,586Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:31:51,586Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:31:51,652Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:31:51,653Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:31:51,653Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:31:52,978Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:31:52,978Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-12T15:31:53,110Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:31:53,110Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-12T15:31:53,198Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:31:53,198Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-12T15:31:53,264Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:31:53,274Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:31:53,515Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:53,570Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:31:53,646Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:31:53,962Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:31:53,962Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:31:53,996Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:31:54,083Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-12T15:31:54,083Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:31:54,127Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,127Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-12T15:31:54,138Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,138Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-12T15:31:54,138Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,138Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,171Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-12T15:31:54,215Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,215Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:31:54,226Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,226Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:31:54,226Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,226Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:31:54,226Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,239Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,239Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-12T15:31:54,272Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,272Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:31:54,305Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:31:54,371Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:31:54,371Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:31:54,371Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:31:54,372Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-12T15:31:54,372Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:31:54,389Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,389Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-12T15:31:54,399Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,399Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-12T15:31:54,399Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,399Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,399Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-12T15:31:54,433Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,433Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:31:54,433Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,433Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:31:54,433Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,433Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:31:54,433Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,433Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:31:54,434Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:31:54,445Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:54,445Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-12T15:31:57,459Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:31:57,470Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:31:57,471Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-12T15:31:57,481Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:31:57,487Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:31:57,537Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-12T15:31:57,538Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:31:57,645Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-12T15:32:05,224Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-153139.208\nodes\0\cordapps] {}
[INFO ] 2020-07-12T15:32:05,239Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:32:05,271Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:32:05,908Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:32:07,739Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:32:08,102Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:32:08,246Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:32:08,418Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:32:08,419Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:32:09,558Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:31:39.055Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:32:16,664Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:16,669Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-153139.208\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:16,669Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:16,732Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:16,891Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:16,904Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:20,340Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:21,407Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:21,411Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:21,419Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:21,419Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:21,547Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:21,609Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:32:21,643Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:32:21,643Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:32:22,086Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:32:22,103Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:32:22,103Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567942103) {}
[INFO ] 2020-07-12T15:32:22,114Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:32:22,409Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567942103) {}
[INFO ] 2020-07-12T15:32:22,487Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:32:22,508Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:32:22,511Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:32:22,528Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567942103) {}
[INFO ] 2020-07-12T15:32:22,576Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:32:22,617Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=5E4ACEDB5A5FA95B6945F27E071515D16F927CC6593254C75889FE7F9984CD4A uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:32:22,631Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-12T15:32:22,636Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-12T15:32:23,312Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567942103) {}
[INFO ] 2020-07-12T15:32:23,379Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567942103) {}
[INFO ] 2020-07-12T15:32:23,382Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:32:23,383Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567942103) {}
[INFO ] 2020-07-12T15:32:23,383Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:32:23,405Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-153139.208\nodes\1\cordapps] {}
[INFO ] 2020-07-12T15:32:23,406Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:32:23,406Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:32:23,685Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:32:23,729Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:32:23,730Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:32:23,733Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:32:23,804Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:32:23,804Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:32:23,811Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:31:39.055Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:32:24,689Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,692Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-153139.208\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,692Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,726Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,731Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,732Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,918Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,932Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,934Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,938Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:24,938Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:25,019Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:25,027Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:32:25,032Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:32:25,033Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:32:25,270Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:32:25,273Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:32:25,324Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:32:25,324Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567945324) {}
[INFO ] 2020-07-12T15:32:25,326Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:32:25,334Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567945324) {}
[INFO ] 2020-07-12T15:32:25,343Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:32:25,344Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:32:25,344Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:32:25,359Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567945324) {}
[INFO ] 2020-07-12T15:32:25,367Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:32:25,404Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=5E4ACEDB5A5FA95B6945F27E071515D16F927CC6593254C75889FE7F9984CD4A uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:32:25,417Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567945324) {}
[INFO ] 2020-07-12T15:32:25,423Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567942103) {}
[INFO ] 2020-07-12T15:32:25,426Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:32:25,440Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567945324) {}
[INFO ] 2020-07-12T15:32:25,443Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:32:25,457Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567945324) {}
[INFO ] 2020-07-12T15:32:25,457Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:32:25,458Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567945324) {}
[INFO ] 2020-07-12T15:32:25,458Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:32:25,475Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-153139.208\nodes\2\cordapps] {}
[INFO ] 2020-07-12T15:32:25,477Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:32:25,477Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:32:25,717Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153139.208/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:32:25,756Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:32:25,757Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:32:25,806Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:32:25,906Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:32:25,906Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:32:25,914Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:31:39.055Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:32:26,723Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,726Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-153139.208\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,726Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,755Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,761Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,761Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,917Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,927Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,929Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,933Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:26,933Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:27,010Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:32:27,018Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:32:27,020Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:32:27,020Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:32:27,192Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:32:27,193Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:32:27,242Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:32:27,242Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567947242) {}
[INFO ] 2020-07-12T15:32:27,245Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:32:27,253Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567947242) {}
[INFO ] 2020-07-12T15:32:27,263Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:32:27,263Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:32:27,263Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:32:27,835Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567947242) {}
[INFO ] 2020-07-12T15:32:27,844Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:32:27,888Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=5E4ACEDB5A5FA95B6945F27E071515D16F927CC6593254C75889FE7F9984CD4A uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:32:27,898Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567947242) {}
[INFO ] 2020-07-12T15:32:27,903Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594567942103) {}
[INFO ] 2020-07-12T15:32:27,906Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:32:27,918Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567947242) {}
[INFO ] 2020-07-12T15:32:27,920Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:32:27,935Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594567945324) {}
[INFO ] 2020-07-12T15:32:27,937Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:32:27,948Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567947242) {}
[INFO ] 2020-07-12T15:32:27,950Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:32:27,962Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567947242) {}
[INFO ] 2020-07-12T15:32:27,962Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:32:27,963Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594567947242) {}
[INFO ] 2020-07-12T15:32:27,963Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-12T15:32:28,297Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eec70f19-72c9-4d15-a7b5-a0332bfcd50b, invocation_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, invocation_timestamp=2020-07-12T15:32:28.021Z, origin=Only For Testing, session_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, session_timestamp=2020-07-12T15:32:28.021Z, thread-id=226}
[WARN ] 2020-07-12T15:32:28,297Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.examples.workinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eec70f19-72c9-4d15-a7b5-a0332bfcd50b, invocation_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, invocation_timestamp=2020-07-12T15:32:28.021Z, origin=Only For Testing, session_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, session_timestamp=2020-07-12T15:32:28.021Z, thread-id=226}
[INFO ] 2020-07-12T15:32:28,846Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eec70f19-72c9-4d15-a7b5-a0332bfcd50b, invocation_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, invocation_timestamp=2020-07-12T15:32:28.021Z, origin=Only For Testing, session_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, session_timestamp=2020-07-12T15:32:28.021Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:28,846Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eec70f19-72c9-4d15-a7b5-a0332bfcd50b, invocation_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, invocation_timestamp=2020-07-12T15:32:28.021Z, origin=Only For Testing, session_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, session_timestamp=2020-07-12T15:32:28.021Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:29,051Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eec70f19-72c9-4d15-a7b5-a0332bfcd50b, invocation_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, invocation_timestamp=2020-07-12T15:32:28.021Z, origin=Only For Testing, session_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, session_timestamp=2020-07-12T15:32:28.021Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:29,357Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=c7f5fd9c-b21b-4886-acc3-c1133605951d, invocation_id=dad409d3-4db7-42f2-be42-76a9f8aa52d2, invocation_timestamp=2020-07-12T15:32:29.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dad409d3-4db7-42f2-be42-76a9f8aa52d2, session_timestamp=2020-07-12T15:32:29.281Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:29,442Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=c7f5fd9c-b21b-4886-acc3-c1133605951d, invocation_id=dad409d3-4db7-42f2-be42-76a9f8aa52d2, invocation_timestamp=2020-07-12T15:32:29.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dad409d3-4db7-42f2-be42-76a9f8aa52d2, session_timestamp=2020-07-12T15:32:29.281Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:29,451Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=c7f5fd9c-b21b-4886-acc3-c1133605951d, invocation_id=dad409d3-4db7-42f2-be42-76a9f8aa52d2, invocation_timestamp=2020-07-12T15:32:29.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dad409d3-4db7-42f2-be42-76a9f8aa52d2, session_timestamp=2020-07-12T15:32:29.281Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:29,462Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=c7f5fd9c-b21b-4886-acc3-c1133605951d, invocation_id=dad409d3-4db7-42f2-be42-76a9f8aa52d2, invocation_timestamp=2020-07-12T15:32:29.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dad409d3-4db7-42f2-be42-76a9f8aa52d2, session_timestamp=2020-07-12T15:32:29.281Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:29,525Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eec70f19-72c9-4d15-a7b5-a0332bfcd50b, invocation_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, invocation_timestamp=2020-07-12T15:32:28.021Z, origin=Only For Testing, session_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, session_timestamp=2020-07-12T15:32:28.021Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:29,525Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eec70f19-72c9-4d15-a7b5-a0332bfcd50b, invocation_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, invocation_timestamp=2020-07-12T15:32:28.021Z, origin=Only For Testing, session_id=3673ba09-b041-40c9-b697-8c5e3dc7e1e6, session_timestamp=2020-07-12T15:32:28.021Z, thread-id=226, tx_id=61021C9E710E15273D586C569B37C7CF97E2B4B7E13CF012D2E6F71D9BE4A276}
[INFO ] 2020-07-12T15:32:29,542Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-12T15:32:29,572Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-12T15:32:29,580Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-12T15:37:55,407Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-12T15:37:55,747Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:37:58,002Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:37:59,998Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-12T15:38:00,016Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:38:00,018Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:38:00,791Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:38:00,824Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-12T15:38:01,380Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:38:01,391Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:38:01,391Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-12T15:38:01,600Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:38:01,611Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:38:02,305Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-12T15:38:02,704Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:38:02,714Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:38:02,769Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:38:02,770Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:38:02,770Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:38:03,976Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:38:03,976Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-12T15:38:04,108Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:38:04,108Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-12T15:38:04,196Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:38:04,196Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-12T15:38:04,251Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:38:04,251Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:38:04,424Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:04,477Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:38:04,554Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:38:04,850Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:38:04,850Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:38:04,883Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:38:04,958Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-12T15:38:04,958Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:38:05,013Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,013Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-12T15:38:05,024Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,024Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-12T15:38:05,024Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,024Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,080Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-12T15:38:05,137Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,137Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:38:05,159Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,159Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:38:05,159Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,159Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:38:05,159Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,159Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,159Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-12T15:38:05,196Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,207Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:38:05,229Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:38:05,284Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:38:05,284Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:38:05,284Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:38:05,295Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-12T15:38:05,295Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:38:05,306Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,306Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-12T15:38:05,316Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,316Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-12T15:38:05,316Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,316Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,316Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-12T15:38:05,349Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,349Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:38:05,349Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,349Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:38:05,349Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,349Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:38:05,349Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,350Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:38:05,350Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:38:05,350Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:05,350Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-12T15:38:07,664Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:38:07,664Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:38:07,664Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-12T15:38:07,664Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:38:07,666Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:38:07,686Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-12T15:38:07,686Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:38:07,713Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-12T15:38:13,040Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-153753.298\nodes\0\cordapps] {}
[INFO ] 2020-07-12T15:38:13,053Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:38:13,075Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:38:13,485Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:38:15,008Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:38:15,325Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:38:15,417Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:38:15,580Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:38:15,581Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:38:16,579Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:37:53.173Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:38:22,884Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:22,888Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-153753.298\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:22,888Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:22,941Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:23,105Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:23,114Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:25,734Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:26,497Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:26,500Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:26,506Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:26,507Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:26,618Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:26,674Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:38:26,716Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:38:26,716Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:38:27,142Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:38:27,155Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:38:27,155Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568307155) {}
[INFO ] 2020-07-12T15:38:27,161Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:38:27,396Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568307155) {}
[INFO ] 2020-07-12T15:38:27,475Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:38:27,496Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:38:27,498Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:38:27,518Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568307155) {}
[INFO ] 2020-07-12T15:38:27,561Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:38:27,609Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:38:27,625Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-12T15:38:27,630Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-12T15:38:28,229Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568307155) {}
[INFO ] 2020-07-12T15:38:28,269Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568307155) {}
[INFO ] 2020-07-12T15:38:28,274Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:38:28,274Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568307155) {}
[INFO ] 2020-07-12T15:38:28,274Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:38:28,300Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-153753.298\nodes\1\cordapps] {}
[INFO ] 2020-07-12T15:38:28,301Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:38:28,301Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:38:28,508Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:38:28,552Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:38:28,553Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:38:28,555Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:38:28,607Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:38:28,607Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:38:28,611Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:37:53.173Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:38:29,356Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,358Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-153753.298\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,358Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,385Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,391Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,391Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,547Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,561Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,564Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,568Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,568Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,649Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:29,657Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:38:29,662Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:38:29,662Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:38:29,841Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:38:29,842Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:38:29,885Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:38:29,886Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568309885) {}
[INFO ] 2020-07-12T15:38:29,888Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:38:29,907Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568309885) {}
[INFO ] 2020-07-12T15:38:29,917Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:38:29,917Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:38:29,917Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:38:29,933Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568309885) {}
[INFO ] 2020-07-12T15:38:29,939Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:38:29,983Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:38:29,999Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568309885) {}
[INFO ] 2020-07-12T15:38:30,006Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568307155) {}
[INFO ] 2020-07-12T15:38:30,009Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:38:30,025Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568309885) {}
[INFO ] 2020-07-12T15:38:30,028Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:38:30,044Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568309885) {}
[INFO ] 2020-07-12T15:38:30,045Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:38:30,045Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568309885) {}
[INFO ] 2020-07-12T15:38:30,045Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:38:30,073Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-153753.298\nodes\2\cordapps] {}
[INFO ] 2020-07-12T15:38:30,073Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:38:30,074Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:38:30,284Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-153753.298/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:38:30,330Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:38:30,331Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:38:30,333Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:38:30,388Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:38:30,389Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:38:30,394Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:37:53.173Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:38:30,972Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:30,974Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-153753.298\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:30,974Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,012Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,017Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,017Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,161Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,170Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,172Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,175Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,175Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,242Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:38:31,251Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:38:31,255Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:38:31,255Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:38:32,073Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:38:32,076Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:38:32,123Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:38:32,123Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568312123) {}
[INFO ] 2020-07-12T15:38:32,125Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:38:32,133Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568312123) {}
[INFO ] 2020-07-12T15:38:32,142Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:38:32,143Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:38:32,143Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:38:32,160Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568312123) {}
[INFO ] 2020-07-12T15:38:32,167Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:38:32,206Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:38:32,218Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568312123) {}
[INFO ] 2020-07-12T15:38:32,223Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568307155) {}
[INFO ] 2020-07-12T15:38:32,225Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:38:32,240Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568312123) {}
[INFO ] 2020-07-12T15:38:32,242Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:38:32,256Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568309885) {}
[INFO ] 2020-07-12T15:38:32,258Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:38:32,270Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568312123) {}
[INFO ] 2020-07-12T15:38:32,271Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:38:32,281Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568312123) {}
[INFO ] 2020-07-12T15:38:32,282Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:38:32,282Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568312123) {}
[INFO ] 2020-07-12T15:38:32,282Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-12T15:38:32,549Z [Mock network] contracts.TransactionState. - State class net.corda.examples.workinsurance.states.InsuranceState belongs to contract net.corda.examples.workinsurance.contracts.InsuranceContract, but is bundled with contract net.corda.examples.carinsurance.contracts.InsuranceContract in TransactionState. Annotate InsuranceState with @BelongsToContract(net.corda.examples.carinsurance.contracts.InsuranceContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
[INFO ] 2020-07-12T15:38:32,567Z [Mock network] corda.flow. - Flow raised an error: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
[INFO ] 2020-07-12T15:38:32,576Z [Mock network] statemachine.StaffedFlowHospital. - Flow [0ea55c09-2191-4ca2-963b-af42fbbece77] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=38a48958-ba8d-4615-80b7-26c15f66445f, timestamp: 2020-07-12T15:38:32.333Z, entityType: Invocation, sessionId=38a48958-ba8d-4615-80b7-26c15f66445f, timestamp: 2020-07-12T15:38:32.333Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=6FC5D98A160BC1CA3B5609167EED0F198DAF3AF3846569C008E8A5BD90A50734), errorState=Clean, numberOfSuspends=0), flowLogic=net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator@583b3e66, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=acf4647c-6664-4468-b671-1b1e24f19d20) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
[INFO ] 2020-07-12T15:38:32,580Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-12T15:38:32,584Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-12T15:38:32,608Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [0ea55c09-2191-4ca2-963b-af42fbbece77] errored, dumping all transitions:

 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.522Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[0ea55c09-2191-4ca2-963b-af42fbbece77], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=38a48958-ba8d-4615-80b7-26c15f66445f, timestamp: 2020-07-12T15:38:32.333Z, entityType: Invocation, sessionId=38a48958-ba8d-4615-80b7-26c15f66445f, timestamp: 2020-07-12T15:38:32.333Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=6FC5D98A160BC1CA3B5609167EED0F198DAF3AF3846569C008E8A5BD90A50734), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28d8b857])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28d8b857])
    SignalFlowHasStarted(flowId=[0ea55c09-2191-4ca2-963b-af42fbbece77])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28d8b857]
    []


 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.586Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-07-12T15:38:32.445Z
    2020-07-12T15:38:32.574Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=9036582428169857732, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.592Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.597Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:38:32.574Z
    2020-07-12T15:38:32.596Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
[WARN ] 2020-07-12T15:38:32,608Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull. [errorCode=1ovjl3n, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1ovjl3n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-12T15:38:32,614Z [Mock network] statemachine.ActionExecutorImpl. - Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull. [errorCode=1ovjl3n, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1ovjl3n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-12T15:38:32,684Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [0ea55c09-2191-4ca2-963b-af42fbbece77] errored, dumping all transitions:

 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.522Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[0ea55c09-2191-4ca2-963b-af42fbbece77], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=38a48958-ba8d-4615-80b7-26c15f66445f, timestamp: 2020-07-12T15:38:32.333Z, entityType: Invocation, sessionId=38a48958-ba8d-4615-80b7-26c15f66445f, timestamp: 2020-07-12T15:38:32.333Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=6FC5D98A160BC1CA3B5609167EED0F198DAF3AF3846569C008E8A5BD90A50734), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28d8b857])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28d8b857])
    SignalFlowHasStarted(flowId=[0ea55c09-2191-4ca2-963b-af42fbbece77])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28d8b857]
    []


 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.586Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-07-12T15:38:32.445Z
    2020-07-12T15:38:32.574Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=9036582428169857732, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.592Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.597Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:38:32.574Z
    2020-07-12T15:38:32.596Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [0ea55c09-2191-4ca2-963b-af42fbbece77] ---
  Timestamp: 2020-07-12T15:38:32.677Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull., errorId=9036582428169857732)], sessions=[], senderUUID=acf4647c-6664-4468-b671-1b1e24f19d20)
    CreateTransaction
    RemoveCheckpoint(id=[0ea55c09-2191-4ca2-963b-af42fbbece77])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=0ea55c09-2191-4ca2-963b-af42fbbece77)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[0ea55c09-2191-4ca2-963b-af42fbbece77], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=9036582428169857732, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=38a48958-ba8d-4615-80b7-26c15f66445f, timestamp: 2020-07-12T15:38:32.333Z, entityType: Invocation, sessionId=38a48958-ba8d-4615-80b7-26c15f66445f, timestamp: 2020-07-12T15:38:32.333Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=6FC5D98A160BC1CA3B5609167EED0F198DAF3AF3846569C008E8A5BD90A50734), errorState=Errored(errors=[FlowError(errorId=9036582428169857732, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator@583b3e66, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=acf4647c-6664-4468-b671-1b1e24f19d20))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:38:32.596Z
    2020-07-12T15:38:32.608Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
[WARN ] 2020-07-12T15:38:32,684Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull. [errorCode=1ovjl3n, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1ovjl3n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0ea55c09-2191-4ca2-963b-af42fbbece77, invocation_id=38a48958-ba8d-4615-80b7-26c15f66445f, invocation_timestamp=2020-07-12T15:38:32.333Z, origin=Only For Testing, session_id=38a48958-ba8d-4615-80b7-26c15f66445f, session_timestamp=2020-07-12T15:38:32.333Z, thread-id=227}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-12T15:38:32,709Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-12T15:38:32,736Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-12T15:38:32,741Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-12T15:45:25,832Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-12T15:45:26,250Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:45:28,399Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:45:30,415Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-12T15:45:30,436Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:45:30,437Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:45:31,177Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:45:31,210Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-12T15:45:31,806Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:45:31,817Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:45:31,817Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-12T15:45:32,069Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:45:32,091Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:45:32,772Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-12T15:45:33,172Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:45:33,183Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:45:33,238Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:45:33,239Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:45:33,239Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:45:34,372Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:45:34,372Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-12T15:45:34,482Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:45:34,482Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-12T15:45:34,569Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:45:34,569Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-12T15:45:34,635Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:45:34,635Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:45:34,811Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:34,854Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:45:34,940Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:45:35,279Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:45:35,279Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:45:35,323Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:45:35,389Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-12T15:45:35,389Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:45:35,433Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,433Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-12T15:45:35,444Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,444Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-12T15:45:35,444Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,444Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,488Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-12T15:45:35,520Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,520Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:45:35,542Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,542Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:45:35,542Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,542Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:45:35,542Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,542Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,558Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-12T15:45:35,580Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,580Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:45:35,602Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:45:35,657Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:45:35,657Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:45:35,657Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:45:35,668Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-12T15:45:35,668Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:45:35,679Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,679Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-12T15:45:35,679Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,679Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-12T15:45:35,679Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,679Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,691Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-12T15:45:35,713Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,713Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,724Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-12T15:45:35,747Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:45:35,758Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:45:35,758Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-12T15:45:35,758Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:45:35,761Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:45:35,791Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-12T15:45:35,791Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:45:35,850Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-12T15:45:41,710Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-154523.582\nodes\0\cordapps] {}
[INFO ] 2020-07-12T15:45:41,730Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:45:41,749Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:45:42,169Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:45:43,690Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:45:43,995Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:45:44,108Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:45:44,282Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:45:44,283Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:45:45,161Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:45:23.447Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:45:52,972Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:52,978Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-154523.582\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:52,978Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:53,043Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:53,215Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:53,222Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:55,742Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:56,544Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:56,547Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:56,554Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:56,554Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:56,683Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:56,742Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:45:56,779Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:45:56,779Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:45:57,173Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:45:57,186Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:45:57,186Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568757186) {}
[INFO ] 2020-07-12T15:45:57,195Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:45:57,397Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568757186) {}
[INFO ] 2020-07-12T15:45:57,466Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:45:57,484Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:45:57,486Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:45:57,502Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568757186) {}
[INFO ] 2020-07-12T15:45:57,540Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:45:57,573Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:45:57,585Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-12T15:45:57,599Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-12T15:45:58,173Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568757186) {}
[INFO ] 2020-07-12T15:45:58,213Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568757186) {}
[INFO ] 2020-07-12T15:45:58,216Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:45:58,217Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568757186) {}
[INFO ] 2020-07-12T15:45:58,217Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:45:58,243Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-154523.582\nodes\1\cordapps] {}
[INFO ] 2020-07-12T15:45:58,244Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:45:58,244Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:45:58,454Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:45:58,498Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:45:58,499Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:45:58,501Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:45:58,555Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:45:58,555Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:45:58,570Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:45:23.447Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:45:59,445Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,448Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-154523.582\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,448Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,482Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,487Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,487Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,675Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,690Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,693Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,697Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,698Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,792Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:45:59,802Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:45:59,808Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:45:59,808Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:46:00,065Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:46:00,067Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:46:00,115Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:46:00,115Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568760115) {}
[INFO ] 2020-07-12T15:46:00,118Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:46:00,128Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568760115) {}
[INFO ] 2020-07-12T15:46:00,140Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:46:00,141Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:46:00,141Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:46:00,157Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568760115) {}
[INFO ] 2020-07-12T15:46:00,164Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:46:00,201Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:46:00,214Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568760115) {}
[INFO ] 2020-07-12T15:46:00,220Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568757186) {}
[INFO ] 2020-07-12T15:46:00,223Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:46:00,237Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568760115) {}
[INFO ] 2020-07-12T15:46:00,239Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:46:00,252Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568760115) {}
[INFO ] 2020-07-12T15:46:00,252Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:46:00,253Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568760115) {}
[INFO ] 2020-07-12T15:46:00,253Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:46:00,270Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-154523.582\nodes\2\cordapps] {}
[INFO ] 2020-07-12T15:46:00,271Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:46:00,271Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:46:00,483Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-154523.582/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:46:00,523Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:46:00,524Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:46:00,538Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:46:00,607Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:46:00,607Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:46:00,612Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:45:23.447Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:46:01,323Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,326Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-154523.582\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,326Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,352Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,357Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,357Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,478Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,487Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,488Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,491Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,491Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,576Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:46:01,582Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:46:01,585Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:46:01,585Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:46:02,461Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:46:02,462Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:46:02,507Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:46:02,507Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568762507) {}
[INFO ] 2020-07-12T15:46:02,509Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:46:02,516Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568762507) {}
[INFO ] 2020-07-12T15:46:02,525Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:46:02,526Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:46:02,526Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:46:02,538Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568762507) {}
[INFO ] 2020-07-12T15:46:02,544Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:46:02,580Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:46:02,589Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568762507) {}
[INFO ] 2020-07-12T15:46:02,594Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594568757186) {}
[INFO ] 2020-07-12T15:46:02,596Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:46:02,607Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568762507) {}
[INFO ] 2020-07-12T15:46:02,609Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:46:02,623Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594568760115) {}
[INFO ] 2020-07-12T15:46:02,624Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:46:02,634Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568762507) {}
[INFO ] 2020-07-12T15:46:02,636Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:46:02,646Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568762507) {}
[INFO ] 2020-07-12T15:46:02,646Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:46:02,646Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594568762507) {}
[INFO ] 2020-07-12T15:46:02,646Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-12T15:46:02,911Z [Mock network] contracts.TransactionState. - State class net.corda.examples.workinsurance.states.InsuranceState belongs to contract net.corda.examples.workinsurance.contracts.InsuranceContract, but is bundled with contract net.corda.examples.carinsurance.contracts.InsuranceContract in TransactionState. Annotate InsuranceState with @BelongsToContract(net.corda.examples.carinsurance.contracts.InsuranceContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
[INFO ] 2020-07-12T15:46:02,923Z [Mock network] corda.flow. - Flow raised an error: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
[INFO ] 2020-07-12T15:46:02,935Z [Mock network] statemachine.StaffedFlowHospital. - Flow [28683c3d-9e96-4fef-b160-3b4b972eb271] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=ed8a711f-5206-4023-88a0-23d51d785757, timestamp: 2020-07-12T15:46:02.695Z, entityType: Invocation, sessionId=ed8a711f-5206-4023-88a0-23d51d785757, timestamp: 2020-07-12T15:46:02.695Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=564F6025D17288C25BF6353E7A97AD39BC20B3C5FCAA29EB91FCB23EEFBA25EF), errorState=Clean, numberOfSuspends=0), flowLogic=net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator@74d15981, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=a5435947-1546-4be4-b9fd-32d2b784778d) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
[INFO ] 2020-07-12T15:46:02,937Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-12T15:46:02,941Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-12T15:46:02,961Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [28683c3d-9e96-4fef-b160-3b4b972eb271] errored, dumping all transitions:

 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:02.883Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[28683c3d-9e96-4fef-b160-3b4b972eb271], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=ed8a711f-5206-4023-88a0-23d51d785757, timestamp: 2020-07-12T15:46:02.695Z, entityType: Invocation, sessionId=ed8a711f-5206-4023-88a0-23d51d785757, timestamp: 2020-07-12T15:46:02.695Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=564F6025D17288C25BF6353E7A97AD39BC20B3C5FCAA29EB91FCB23EEFBA25EF), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@776cdab3])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@776cdab3])
    SignalFlowHasStarted(flowId=[28683c3d-9e96-4fef-b160-3b4b972eb271])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@776cdab3]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:02.943Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:46:02.807Z
    2020-07-12T15:46:02.933Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7828072170874205852, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:02.947Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:02.952Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:46:02.933Z
    2020-07-12T15:46:02.952Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
[WARN ] 2020-07-12T15:46:02,961Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull. [errorCode=1ovjl3n, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1ovjl3n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-12T15:46:02,965Z [Mock network] statemachine.ActionExecutorImpl. - Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull. [errorCode=1ovjl3n, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1ovjl3n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-12T15:46:03,016Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [28683c3d-9e96-4fef-b160-3b4b972eb271] errored, dumping all transitions:

 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:02.883Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[28683c3d-9e96-4fef-b160-3b4b972eb271], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=ed8a711f-5206-4023-88a0-23d51d785757, timestamp: 2020-07-12T15:46:02.695Z, entityType: Invocation, sessionId=ed8a711f-5206-4023-88a0-23d51d785757, timestamp: 2020-07-12T15:46:02.695Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=564F6025D17288C25BF6353E7A97AD39BC20B3C5FCAA29EB91FCB23EEFBA25EF), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@776cdab3])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@776cdab3])
    SignalFlowHasStarted(flowId=[28683c3d-9e96-4fef-b160-3b4b972eb271])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@776cdab3]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:02.943Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:46:02.807Z
    2020-07-12T15:46:02.933Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7828072170874205852, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:02.947Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:02.952Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:46:02.933Z
    2020-07-12T15:46:02.952Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [28683c3d-9e96-4fef-b160-3b4b972eb271] ---
  Timestamp: 2020-07-12T15:46:03.009Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull., errorId=7828072170874205852)], sessions=[], senderUUID=a5435947-1546-4be4-b9fd-32d2b784778d)
    CreateTransaction
    RemoveCheckpoint(id=[28683c3d-9e96-4fef-b160-3b4b972eb271])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=28683c3d-9e96-4fef-b160-3b4b972eb271)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[28683c3d-9e96-4fef-b160-3b4b972eb271], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7828072170874205852, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=ed8a711f-5206-4023-88a0-23d51d785757, timestamp: 2020-07-12T15:46:02.695Z, entityType: Invocation, sessionId=ed8a711f-5206-4023-88a0-23d51d785757, timestamp: 2020-07-12T15:46:02.695Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=564F6025D17288C25BF6353E7A97AD39BC20B3C5FCAA29EB91FCB23EEFBA25EF), errorState=Errored(errors=[FlowError(errorId=7828072170874205852, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator@74d15981, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=a5435947-1546-4be4-b9fd-32d2b784778d))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2020-07-12T15:46:02.952Z
    2020-07-12T15:46:02.961Z
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
[WARN ] 2020-07-12T15:46:03,016Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull. [errorCode=1ovjl3n, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1ovjl3n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=28683c3d-9e96-4fef-b160-3b4b972eb271, invocation_id=ed8a711f-5206-4023-88a0-23d51d785757, invocation_timestamp=2020-07-12T15:46:02.695Z, origin=Only For Testing, session_id=ed8a711f-5206-4023-88a0-23d51d785757, session_timestamp=2020-07-12T15:46:02.695Z, thread-id=225}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-12T15:46:03,043Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-12T15:46:03,067Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-12T15:46:03,073Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-12T15:52:18,204Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-12T15:52:18,788Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:52:22,294Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:52:25,448Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-12T15:52:25,479Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T15:52:25,481Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:52:26,593Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:52:26,635Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-12T15:52:27,351Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:52:27,362Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:52:27,362Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-12T15:52:27,656Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:52:27,689Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:52:28,430Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-12T15:52:28,935Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:52:28,935Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:52:29,006Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:52:29,006Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T15:52:29,007Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T15:52:30,286Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:52:30,286Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-12T15:52:30,405Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:52:30,405Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-12T15:52:30,592Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:52:30,592Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-12T15:52:30,763Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T15:52:30,774Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:52:31,121Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:31,185Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:52:31,272Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:52:31,587Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:52:31,598Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-12T15:52:31,631Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:52:31,718Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-12T15:52:31,718Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T15:52:31,762Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:31,762Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-12T15:52:31,773Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:31,773Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-12T15:52:31,773Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:31,773Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:31,817Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-12T15:52:31,906Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:31,906Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:52:31,930Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:31,941Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:52:31,941Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:31,941Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T15:52:31,941Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:31,956Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:31,969Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-12T15:52:32,003Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:32,014Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:52:32,036Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:52:32,112Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:52:32,112Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-12T15:52:32,112Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:52:32,125Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-12T15:52:32,125Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T15:52:32,158Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:32,158Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-12T15:52:32,169Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:32,170Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-12T15:52:32,170Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:32,170Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:32,170Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-12T15:52:32,213Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:32,213Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:52:32,224Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:32,224Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:52:32,224Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:32,224Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:52:32,225Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:32,225Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T15:52:32,225Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T15:52:32,225Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:32,225Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-12T15:52:32,272Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T15:52:32,282Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:52:32,282Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-12T15:52:32,282Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T15:52:32,305Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:52:32,327Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-12T15:52:32,327Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T15:52:32,386Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-12T15:52:41,428Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-155215.594\nodes\0\cordapps] {}
[INFO ] 2020-07-12T15:52:41,446Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:52:41,479Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:52:42,113Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:52:44,072Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:52:44,538Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:52:44,698Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:52:45,474Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:52:45,475Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:52:45,795Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:52:15.477Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:52:57,178Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:52:57,187Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-155215.594\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:52:57,187Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:52:57,278Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:52:57,394Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:52:57,404Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:01,322Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:02,447Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:02,450Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:02,461Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:02,461Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:02,607Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:02,674Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:53:02,720Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:53:02,720Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:53:03,342Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T15:53:03,360Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:53:03,361Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594569183360) {}
[INFO ] 2020-07-12T15:53:03,369Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:53:03,700Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594569183360) {}
[INFO ] 2020-07-12T15:53:03,810Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:53:03,866Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:53:03,869Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:53:03,892Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594569183360) {}
[INFO ] 2020-07-12T15:53:03,946Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:53:04,051Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:53:04,068Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-12T15:53:04,074Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-12T15:53:04,855Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594569183360) {}
[INFO ] 2020-07-12T15:53:04,915Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594569183360) {}
[INFO ] 2020-07-12T15:53:04,920Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:53:04,921Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594569183360) {}
[INFO ] 2020-07-12T15:53:04,921Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:53:04,989Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-155215.594\nodes\1\cordapps] {}
[INFO ] 2020-07-12T15:53:04,990Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:53:04,990Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:53:05,351Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:53:05,489Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:53:05,495Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:53:05,501Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:53:05,659Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:53:05,659Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:53:05,666Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:52:15.477Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:53:06,945Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:06,949Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-155215.594\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:06,949Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,002Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,012Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,012Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,309Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,340Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,342Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,346Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,346Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,441Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:07,450Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:53:07,456Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:53:07,456Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:53:08,371Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:53:08,374Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:53:08,451Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:53:08,451Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594569188451) {}
[INFO ] 2020-07-12T15:53:08,455Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:53:08,464Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594569188451) {}
[INFO ] 2020-07-12T15:53:08,475Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:53:08,475Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:53:08,475Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:53:08,494Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594569188451) {}
[INFO ] 2020-07-12T15:53:08,502Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:53:08,554Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:53:08,578Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594569188451) {}
[INFO ] 2020-07-12T15:53:08,592Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594569183360) {}
[INFO ] 2020-07-12T15:53:08,599Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:53:08,624Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594569188451) {}
[INFO ] 2020-07-12T15:53:08,628Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:53:08,654Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594569188451) {}
[INFO ] 2020-07-12T15:53:08,654Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:53:08,655Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594569188451) {}
[INFO ] 2020-07-12T15:53:08,656Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:53:08,741Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-155215.594\nodes\2\cordapps] {}
[INFO ] 2020-07-12T15:53:08,745Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T15:53:08,745Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T15:53:09,210Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-155215.594/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T15:53:09,329Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T15:53:09,330Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T15:53:09,333Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T15:53:09,419Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T15:53:09,419Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T15:53:09,426Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T15:52:15.477Z
      epoch=1
  } {}
[INFO ] 2020-07-12T15:53:10,769Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:10,775Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-155215.594\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:10,775Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:10,824Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:10,857Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:10,857Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:11,081Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:11,093Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:11,095Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:11,099Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:11,099Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:11,200Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T15:53:11,215Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T15:53:11,220Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:53:11,220Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:53:11,554Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T15:53:11,559Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T15:53:11,678Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T15:53:11,678Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594569191678) {}
[INFO ] 2020-07-12T15:53:11,682Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:53:11,697Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594569191678) {}
[INFO ] 2020-07-12T15:53:11,762Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T15:53:11,762Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T15:53:11,762Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T15:53:11,790Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594569191678) {}
[INFO ] 2020-07-12T15:53:11,801Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:53:11,863Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=AB6D4F4491F5E1011AA6A20D7D6F4EB706BAFCF06720B10245D88BB57E9CA293 uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T15:53:11,880Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594569191678) {}
[INFO ] 2020-07-12T15:53:11,886Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594569183360) {}
[INFO ] 2020-07-12T15:53:11,893Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T15:53:11,911Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594569191678) {}
[INFO ] 2020-07-12T15:53:11,913Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:53:11,937Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594569188451) {}
[INFO ] 2020-07-12T15:53:11,940Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T15:53:11,960Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594569191678) {}
[INFO ] 2020-07-12T15:53:11,963Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T15:53:11,981Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594569191678) {}
[INFO ] 2020-07-12T15:53:11,981Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T15:53:11,984Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594569191678) {}
[INFO ] 2020-07-12T15:53:11,984Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-12T15:55:13,212Z [Mock network] contracts.TransactionState. - State class net.corda.examples.workinsurance.states.InsuranceState belongs to contract net.corda.examples.workinsurance.contracts.InsuranceContract, but is bundled with contract net.corda.examples.carinsurance.contracts.InsuranceContract in TransactionState. Annotate InsuranceState with @BelongsToContract(net.corda.examples.carinsurance.contracts.InsuranceContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7e1447df-65fb-4982-ae2c-d555f6a6a7da, invocation_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, invocation_timestamp=2020-07-12T15:53:12.107Z, origin=Only For Testing, session_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, session_timestamp=2020-07-12T15:53:12.107Z, thread-id=230}
[INFO ] 2020-07-12T15:55:13,341Z [Mock network] corda.flow. - Flow raised an error: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7e1447df-65fb-4982-ae2c-d555f6a6a7da, invocation_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, invocation_timestamp=2020-07-12T15:53:12.107Z, origin=Only For Testing, session_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, session_timestamp=2020-07-12T15:53:12.107Z, thread-id=230}
[INFO ] 2020-07-12T15:55:13,352Z [Mock network] statemachine.StaffedFlowHospital. - Flow [7e1447df-65fb-4982-ae2c-d555f6a6a7da] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, timestamp: 2020-07-12T15:53:12.107Z, entityType: Invocation, sessionId=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, timestamp: 2020-07-12T15:53:12.107Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=46BD9CC7BF72107D9E4B2065BD06A5D14444C5188846E9581B11E9BD7F020062), errorState=Clean, numberOfSuspends=0), flowLogic=net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator@596caa02, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=2fa84422-ca8a-4152-bcdc-0fca3204988d) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7e1447df-65fb-4982-ae2c-d555f6a6a7da, invocation_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, invocation_timestamp=2020-07-12T15:53:12.107Z, origin=Only For Testing, session_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, session_timestamp=2020-07-12T15:53:12.107Z, thread-id=230}
[INFO ] 2020-07-12T15:55:13,356Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7e1447df-65fb-4982-ae2c-d555f6a6a7da, invocation_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, invocation_timestamp=2020-07-12T15:53:12.107Z, origin=Only For Testing, session_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, session_timestamp=2020-07-12T15:53:12.107Z, thread-id=230}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-12T15:55:13,362Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7e1447df-65fb-4982-ae2c-d555f6a6a7da, invocation_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, invocation_timestamp=2020-07-12T15:53:12.107Z, origin=Only For Testing, session_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, session_timestamp=2020-07-12T15:53:12.107Z, thread-id=230}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.
	at net.corda.core.transactions.TransactionBuilder.getInstalledContractAttachmentId(TransactionBuilder.kt:616) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$getInstalledContractAttachmentId(TransactionBuilder.kt:46) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$1.invoke(TransactionBuilder.kt:402) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:462) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:359) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:159) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:68) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-12T15:55:13,395Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [7e1447df-65fb-4982-ae2c-d555f6a6a7da] errored, dumping all transitions:

 --- Transition of flow [7e1447df-65fb-4982-ae2c-d555f6a6a7da] ---
  Timestamp: 2020-07-12T15:55:13.054Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[7e1447df-65fb-4982-ae2c-d555f6a6a7da], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, timestamp: 2020-07-12T15:53:12.107Z, entityType: Invocation, sessionId=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, timestamp: 2020-07-12T15:53:12.107Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1, corDappHash=0C5BE6949ED073AB2EB7AE09BB5BCC1AB5E9CFD0D4C93D42FD736CCA78429433), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=46BD9CC7BF72107D9E4B2065BD06A5D14444C5188846E9581B11E9BD7F020062), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1bc8ca58])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1bc8ca58])
    SignalFlowHasStarted(flowId=[7e1447df-65fb-4982-ae2c-d555f6a6a7da])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1bc8ca58]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [7e1447df-65fb-4982-ae2c-d555f6a6a7da] ---
  Timestamp: 2020-07-12T15:55:13.365Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:53:12.344Z
    2020-07-12T15:55:13.350Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6333056429632419791, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for net.corda.examples.carinsurance.contracts.InsuranceContractnull.)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [7e1447df-65fb-4982-ae2c-d555f6a6a7da] ---
  Timestamp: 2020-07-12T15:55:13.373Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7e1447df-65fb-4982-ae2c-d555f6a6a7da] ---
  Timestamp: 2020-07-12T15:55:13.379Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-12T15:55:13.350Z
    2020-07-12T15:55:13.379Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7e1447df-65fb-4982-ae2c-d555f6a6a7da, invocation_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, invocation_timestamp=2020-07-12T15:53:12.107Z, origin=Only For Testing, session_id=ae3926aa-d6c9-4992-adb7-3b2d1f91588e, session_timestamp=2020-07-12T15:53:12.107Z, thread-id=230}
[INFO ] 2020-07-12T16:10:51,451Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-12T16:10:51,799Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T16:10:54,168Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-12T16:10:54,195Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T16:10:54,261Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T16:10:54,261Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-12T16:10:54,271Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T16:10:54,271Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T16:10:54,271Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-12T16:10:54,271Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T16:10:54,271Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T16:10:54,305Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-12T16:10:54,414Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T16:10:54,414Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T16:10:54,436Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T16:10:54,436Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T16:10:54,437Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T16:10:54,579Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T16:10:54,580Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-12T16:10:54,590Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T16:10:54,590Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-12T16:10:54,601Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T16:10:54,601Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-12T16:10:54,623Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T16:10:54,623Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T16:10:54,655Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:54,666Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T16:10:54,731Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-12T16:10:54,978Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T16:10:54,978Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-12T16:10:55,022Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T16:10:55,099Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-12T16:10:55,099Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T16:10:55,110Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,121Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-12T16:10:55,121Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,121Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-12T16:10:55,121Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,121Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,121Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-12T16:10:55,167Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,167Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T16:10:55,178Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,178Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T16:10:55,178Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,178Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T16:10:55,178Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,178Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,190Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-12T16:10:55,225Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,225Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T16:10:55,247Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-12T16:10:55,292Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T16:10:55,292Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-12T16:10:55,292Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T16:10:55,292Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-12T16:10:55,293Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T16:10:55,306Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,306Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-12T16:10:55,318Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,318Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-12T16:10:55,318Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,318Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,318Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-12T16:10:55,344Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,344Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T16:10:55,355Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,355Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T16:10:55,355Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,355Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T16:10:55,355Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,356Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T16:10:55,356Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T16:10:55,356Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,357Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-12T16:10:55,377Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T16:10:55,399Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T16:10:55,399Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-12T16:10:55,399Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T16:10:55,402Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T16:10:55,423Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-12T16:10:55,423Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T16:10:55,452Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-12T16:11:04,249Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-161049.268\nodes\0\cordapps] {}
[INFO ] 2020-07-12T16:11:04,271Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T16:11:04,312Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T16:11:05,039Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T16:11:06,909Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T16:11:07,311Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T16:11:07,461Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T16:11:07,629Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T16:11:07,629Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T16:11:07,949Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T16:10:49.125Z
      epoch=1
  } {}
[INFO ] 2020-07-12T16:11:15,803Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:15,807Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-161049.268\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:15,807Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:15,858Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:16,000Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:16,008Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:19,429Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:20,406Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:20,409Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:20,415Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:20,415Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:20,553Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:20,614Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T16:11:20,645Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T16:11:20,645Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T16:11:21,107Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T16:11:21,121Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T16:11:21,121Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594570281121) {}
[INFO ] 2020-07-12T16:11:21,129Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T16:11:21,379Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594570281121) {}
[INFO ] 2020-07-12T16:11:21,521Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T16:11:21,544Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T16:11:21,547Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T16:11:21,565Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594570281121) {}
[INFO ] 2020-07-12T16:11:21,613Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T16:11:21,656Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=20E345D8782F568BBDE72AB48D4E5C061DD8959959BD9EB8285930D35D8CBB4B uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T16:11:21,672Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-12T16:11:21,678Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-12T16:11:22,510Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594570281121) {}
[INFO ] 2020-07-12T16:11:22,580Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594570281121) {}
[INFO ] 2020-07-12T16:11:22,585Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T16:11:22,586Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594570281121) {}
[INFO ] 2020-07-12T16:11:22,586Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T16:11:22,655Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-161049.268\nodes\1\cordapps] {}
[INFO ] 2020-07-12T16:11:22,672Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T16:11:22,672Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T16:11:22,935Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T16:11:22,989Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T16:11:22,991Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T16:11:23,041Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T16:11:23,169Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T16:11:23,170Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T16:11:23,180Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T16:10:49.125Z
      epoch=1
  } {}
[INFO ] 2020-07-12T16:11:24,142Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,146Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-161049.268\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,146Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,196Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,203Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,203Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,418Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,438Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,440Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,445Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,445Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,569Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:24,578Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T16:11:24,584Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T16:11:24,584Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T16:11:24,806Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T16:11:24,808Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T16:11:24,869Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T16:11:24,869Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594570284869) {}
[INFO ] 2020-07-12T16:11:24,872Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T16:11:24,880Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594570284869) {}
[INFO ] 2020-07-12T16:11:24,891Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T16:11:24,892Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T16:11:24,892Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T16:11:24,906Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594570284869) {}
[INFO ] 2020-07-12T16:11:24,912Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T16:11:24,941Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=20E345D8782F568BBDE72AB48D4E5C061DD8959959BD9EB8285930D35D8CBB4B uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T16:11:24,952Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594570284869) {}
[INFO ] 2020-07-12T16:11:24,957Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594570281121) {}
[INFO ] 2020-07-12T16:11:24,959Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T16:11:24,971Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594570284869) {}
[INFO ] 2020-07-12T16:11:24,973Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T16:11:24,985Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594570284869) {}
[INFO ] 2020-07-12T16:11:24,985Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T16:11:24,986Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594570284869) {}
[INFO ] 2020-07-12T16:11:24,986Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T16:11:25,046Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-161049.268\nodes\2\cordapps] {}
[INFO ] 2020-07-12T16:11:25,047Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T16:11:25,047Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T16:11:25,301Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-161049.268/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T16:11:25,391Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T16:11:25,394Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T16:11:25,399Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T16:11:25,572Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T16:11:25,572Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T16:11:25,582Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T16:10:49.125Z
      epoch=1
  } {}
[INFO ] 2020-07-12T16:11:26,484Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,487Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-161049.268\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,487Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,538Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,544Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,544Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,693Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,702Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,703Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,708Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,708Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,799Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T16:11:26,809Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T16:11:26,811Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T16:11:26,811Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T16:11:26,968Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T16:11:26,970Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T16:11:27,013Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T16:11:27,013Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594570287013) {}
[INFO ] 2020-07-12T16:11:27,014Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T16:11:27,023Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594570287013) {}
[INFO ] 2020-07-12T16:11:27,088Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T16:11:27,089Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T16:11:27,089Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T16:11:27,124Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594570287013) {}
[INFO ] 2020-07-12T16:11:27,169Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T16:11:27,244Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=20E345D8782F568BBDE72AB48D4E5C061DD8959959BD9EB8285930D35D8CBB4B uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T16:11:27,255Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594570287013) {}
[INFO ] 2020-07-12T16:11:27,259Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594570281121) {}
[INFO ] 2020-07-12T16:11:27,261Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T16:11:27,272Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594570287013) {}
[INFO ] 2020-07-12T16:11:27,274Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T16:11:27,286Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594570284869) {}
[INFO ] 2020-07-12T16:11:27,288Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T16:11:27,301Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594570287013) {}
[INFO ] 2020-07-12T16:11:27,302Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T16:11:27,312Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594570287013) {}
[INFO ] 2020-07-12T16:11:27,312Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T16:11:27,313Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594570287013) {}
[INFO ] 2020-07-12T16:11:27,313Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-12T16:11:28,264Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=840f97a4-6200-4b0e-a954-26bbc287c226, invocation_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, invocation_timestamp=2020-07-12T16:11:27.972Z, origin=Only For Testing, session_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, session_timestamp=2020-07-12T16:11:27.972Z, thread-id=221}
[WARN ] 2020-07-12T16:11:28,264Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.examples.workinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=840f97a4-6200-4b0e-a954-26bbc287c226, invocation_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, invocation_timestamp=2020-07-12T16:11:27.972Z, origin=Only For Testing, session_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, session_timestamp=2020-07-12T16:11:27.972Z, thread-id=221}
[INFO ] 2020-07-12T16:11:28,867Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=840f97a4-6200-4b0e-a954-26bbc287c226, invocation_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, invocation_timestamp=2020-07-12T16:11:27.972Z, origin=Only For Testing, session_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, session_timestamp=2020-07-12T16:11:27.972Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:28,867Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=840f97a4-6200-4b0e-a954-26bbc287c226, invocation_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, invocation_timestamp=2020-07-12T16:11:27.972Z, origin=Only For Testing, session_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, session_timestamp=2020-07-12T16:11:27.972Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:29,041Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=840f97a4-6200-4b0e-a954-26bbc287c226, invocation_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, invocation_timestamp=2020-07-12T16:11:27.972Z, origin=Only For Testing, session_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, session_timestamp=2020-07-12T16:11:27.972Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:29,334Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=2e2c6ec4-0bef-4fbb-8a41-50e85819a5a7, invocation_id=7e02495d-f51e-4b4d-ab9a-d0e733881b4a, invocation_timestamp=2020-07-12T16:11:29.255Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7e02495d-f51e-4b4d-ab9a-d0e733881b4a, session_timestamp=2020-07-12T16:11:29.255Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:29,412Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=2e2c6ec4-0bef-4fbb-8a41-50e85819a5a7, invocation_id=7e02495d-f51e-4b4d-ab9a-d0e733881b4a, invocation_timestamp=2020-07-12T16:11:29.255Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7e02495d-f51e-4b4d-ab9a-d0e733881b4a, session_timestamp=2020-07-12T16:11:29.255Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:29,422Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=2e2c6ec4-0bef-4fbb-8a41-50e85819a5a7, invocation_id=7e02495d-f51e-4b4d-ab9a-d0e733881b4a, invocation_timestamp=2020-07-12T16:11:29.255Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7e02495d-f51e-4b4d-ab9a-d0e733881b4a, session_timestamp=2020-07-12T16:11:29.255Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:29,436Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=2e2c6ec4-0bef-4fbb-8a41-50e85819a5a7, invocation_id=7e02495d-f51e-4b4d-ab9a-d0e733881b4a, invocation_timestamp=2020-07-12T16:11:29.255Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7e02495d-f51e-4b4d-ab9a-d0e733881b4a, session_timestamp=2020-07-12T16:11:29.255Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:29,494Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=840f97a4-6200-4b0e-a954-26bbc287c226, invocation_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, invocation_timestamp=2020-07-12T16:11:27.972Z, origin=Only For Testing, session_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, session_timestamp=2020-07-12T16:11:27.972Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:29,494Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=840f97a4-6200-4b0e-a954-26bbc287c226, invocation_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, invocation_timestamp=2020-07-12T16:11:27.972Z, origin=Only For Testing, session_id=cbd5f841-9ac5-45eb-9157-b0a56170e163, session_timestamp=2020-07-12T16:11:27.972Z, thread-id=221, tx_id=6B62843BA44DE46B9E1E4F075D136F4030FEEED0F4D23AE385717B90335DDC28}
[INFO ] 2020-07-12T16:11:29,509Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-12T16:11:29,537Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-12T16:11:29,543Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-12T17:58:26,429Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-12T17:58:26,741Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T17:58:29,063Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T17:58:31,778Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-12T17:58:31,797Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T17:58:31,798Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T17:58:32,586Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T17:58:32,630Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-12T17:58:33,344Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T17:58:33,344Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T17:58:33,344Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-12T17:58:33,618Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T17:58:33,640Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T17:58:34,382Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-12T17:58:34,930Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T17:58:34,941Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T17:58:34,996Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T17:58:34,997Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T17:58:34,997Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T17:58:36,256Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T17:58:36,256Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-12T17:58:36,377Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T17:58:36,377Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-12T17:58:36,454Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T17:58:36,454Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-12T17:58:36,520Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T17:58:36,531Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T17:58:36,749Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:36,815Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T17:58:36,914Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-12T17:58:37,196Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T17:58:37,196Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-12T17:58:37,240Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T17:58:37,303Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-12T17:58:37,303Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T17:58:37,347Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,358Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-12T17:58:37,358Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,358Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-12T17:58:37,369Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,369Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,401Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-12T17:58:37,444Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,444Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T17:58:37,455Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,455Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T17:58:37,455Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,455Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T17:58:37,466Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,466Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,466Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-12T17:58:37,501Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,501Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T17:58:37,523Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-12T17:58:37,578Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T17:58:37,589Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-12T17:58:37,589Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T17:58:37,589Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-12T17:58:37,589Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T17:58:37,600Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,611Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-12T17:58:37,611Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,611Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-12T17:58:37,611Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,611Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,612Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-12T17:58:37,661Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,672Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T17:58:37,672Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,672Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T17:58:37,672Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,672Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T17:58:37,672Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,672Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T17:58:37,672Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T17:58:37,673Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:37,683Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-12T17:58:40,519Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T17:58:40,530Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T17:58:40,541Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-12T17:58:40,542Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T17:58:40,548Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T17:58:40,597Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-12T17:58:40,598Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T17:58:40,708Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-12T17:58:49,668Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-175824.378\nodes\0\cordapps] {}
[INFO ] 2020-07-12T17:58:49,685Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T17:58:49,716Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T17:58:50,303Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T17:58:52,439Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T17:58:52,906Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T17:58:53,085Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T17:58:53,274Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T17:58:53,274Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T17:58:54,866Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T17:58:24.254Z
      epoch=1
  } {}
[INFO ] 2020-07-12T17:59:02,173Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:02,178Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-175824.378\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:02,178Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:02,233Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:02,460Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:02,467Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:06,266Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:07,267Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:07,270Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:07,277Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:07,277Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:07,408Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:07,464Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T17:59:07,495Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T17:59:07,495Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T17:59:07,946Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T17:59:07,964Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T17:59:07,964Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576747964) {}
[INFO ] 2020-07-12T17:59:07,972Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T17:59:08,217Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576747964) {}
[INFO ] 2020-07-12T17:59:08,389Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T17:59:08,418Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T17:59:08,422Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T17:59:08,449Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576747964) {}
[INFO ] 2020-07-12T17:59:08,507Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T17:59:08,561Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=20E345D8782F568BBDE72AB48D4E5C061DD8959959BD9EB8285930D35D8CBB4B uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T17:59:08,581Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-12T17:59:08,590Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-12T17:59:09,433Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576747964) {}
[INFO ] 2020-07-12T17:59:09,489Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576747964) {}
[INFO ] 2020-07-12T17:59:09,493Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T17:59:09,494Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576747964) {}
[INFO ] 2020-07-12T17:59:09,494Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T17:59:09,579Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-175824.378\nodes\1\cordapps] {}
[INFO ] 2020-07-12T17:59:09,581Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T17:59:09,581Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T17:59:09,895Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T17:59:09,943Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T17:59:09,945Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T17:59:09,994Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T17:59:10,084Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T17:59:10,084Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T17:59:10,090Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T17:58:24.254Z
      epoch=1
  } {}
[INFO ] 2020-07-12T17:59:10,962Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:10,966Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-175824.378\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:10,966Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:10,998Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,005Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,005Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,199Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,212Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,214Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,218Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,218Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,312Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:11,319Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T17:59:11,324Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T17:59:11,324Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T17:59:11,500Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T17:59:11,501Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T17:59:11,591Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T17:59:11,591Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576751591) {}
[INFO ] 2020-07-12T17:59:11,611Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T17:59:11,620Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576751591) {}
[INFO ] 2020-07-12T17:59:11,630Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T17:59:11,631Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T17:59:11,631Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T17:59:11,648Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576751591) {}
[INFO ] 2020-07-12T17:59:11,655Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T17:59:11,696Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=20E345D8782F568BBDE72AB48D4E5C061DD8959959BD9EB8285930D35D8CBB4B uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T17:59:11,710Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576751591) {}
[INFO ] 2020-07-12T17:59:11,717Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576747964) {}
[INFO ] 2020-07-12T17:59:11,720Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T17:59:11,736Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576751591) {}
[INFO ] 2020-07-12T17:59:11,738Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T17:59:11,756Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576751591) {}
[INFO ] 2020-07-12T17:59:11,757Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T17:59:11,757Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576751591) {}
[INFO ] 2020-07-12T17:59:11,757Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T17:59:11,787Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-175824.378\nodes\2\cordapps] {}
[INFO ] 2020-07-12T17:59:11,789Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T17:59:11,789Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T17:59:12,143Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-175824.378/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T17:59:12,257Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T17:59:12,259Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T17:59:12,262Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T17:59:12,337Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T17:59:12,338Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T17:59:12,343Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T17:58:24.254Z
      epoch=1
  } {}
[INFO ] 2020-07-12T17:59:13,317Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,322Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-175824.378\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,322Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,386Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,393Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,393Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,522Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,532Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,534Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,538Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,538Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,615Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T17:59:13,622Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T17:59:13,624Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T17:59:13,624Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T17:59:14,353Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T17:59:14,358Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T17:59:14,412Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T17:59:14,412Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576754412) {}
[INFO ] 2020-07-12T17:59:14,414Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T17:59:14,424Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576754412) {}
[INFO ] 2020-07-12T17:59:14,437Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T17:59:14,437Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T17:59:14,437Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T17:59:14,457Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576754412) {}
[INFO ] 2020-07-12T17:59:14,465Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T17:59:14,510Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=20E345D8782F568BBDE72AB48D4E5C061DD8959959BD9EB8285930D35D8CBB4B uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T17:59:14,521Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576754412) {}
[INFO ] 2020-07-12T17:59:14,525Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576747964) {}
[INFO ] 2020-07-12T17:59:14,526Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T17:59:14,539Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576754412) {}
[INFO ] 2020-07-12T17:59:14,542Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T17:59:14,557Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576751591) {}
[INFO ] 2020-07-12T17:59:14,559Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T17:59:14,570Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576754412) {}
[INFO ] 2020-07-12T17:59:14,572Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T17:59:14,582Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576754412) {}
[INFO ] 2020-07-12T17:59:14,582Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T17:59:14,583Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576754412) {}
[INFO ] 2020-07-12T17:59:14,583Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-12T17:59:14,965Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b1d5e220-909f-401e-99ef-f4c251dfb52b, invocation_id=0437f1f3-2cda-4947-a960-f26093c7f041, invocation_timestamp=2020-07-12T17:59:14.650Z, origin=Only For Testing, session_id=0437f1f3-2cda-4947-a960-f26093c7f041, session_timestamp=2020-07-12T17:59:14.650Z, thread-id=226}
[WARN ] 2020-07-12T17:59:14,966Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.examples.workinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b1d5e220-909f-401e-99ef-f4c251dfb52b, invocation_id=0437f1f3-2cda-4947-a960-f26093c7f041, invocation_timestamp=2020-07-12T17:59:14.650Z, origin=Only For Testing, session_id=0437f1f3-2cda-4947-a960-f26093c7f041, session_timestamp=2020-07-12T17:59:14.650Z, thread-id=226}
[INFO ] 2020-07-12T17:59:15,531Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b1d5e220-909f-401e-99ef-f4c251dfb52b, invocation_id=0437f1f3-2cda-4947-a960-f26093c7f041, invocation_timestamp=2020-07-12T17:59:14.650Z, origin=Only For Testing, session_id=0437f1f3-2cda-4947-a960-f26093c7f041, session_timestamp=2020-07-12T17:59:14.650Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:15,531Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b1d5e220-909f-401e-99ef-f4c251dfb52b, invocation_id=0437f1f3-2cda-4947-a960-f26093c7f041, invocation_timestamp=2020-07-12T17:59:14.650Z, origin=Only For Testing, session_id=0437f1f3-2cda-4947-a960-f26093c7f041, session_timestamp=2020-07-12T17:59:14.650Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:15,727Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b1d5e220-909f-401e-99ef-f4c251dfb52b, invocation_id=0437f1f3-2cda-4947-a960-f26093c7f041, invocation_timestamp=2020-07-12T17:59:14.650Z, origin=Only For Testing, session_id=0437f1f3-2cda-4947-a960-f26093c7f041, session_timestamp=2020-07-12T17:59:14.650Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:16,039Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=0a78f1e9-903c-423f-b13d-946b283e013a, invocation_id=7bb55bb6-6a82-46b8-9f87-5277e4405e22, invocation_timestamp=2020-07-12T17:59:15.959Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7bb55bb6-6a82-46b8-9f87-5277e4405e22, session_timestamp=2020-07-12T17:59:15.959Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:16,118Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=0a78f1e9-903c-423f-b13d-946b283e013a, invocation_id=7bb55bb6-6a82-46b8-9f87-5277e4405e22, invocation_timestamp=2020-07-12T17:59:15.959Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7bb55bb6-6a82-46b8-9f87-5277e4405e22, session_timestamp=2020-07-12T17:59:15.959Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:16,125Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=0a78f1e9-903c-423f-b13d-946b283e013a, invocation_id=7bb55bb6-6a82-46b8-9f87-5277e4405e22, invocation_timestamp=2020-07-12T17:59:15.959Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7bb55bb6-6a82-46b8-9f87-5277e4405e22, session_timestamp=2020-07-12T17:59:15.959Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:16,136Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=0a78f1e9-903c-423f-b13d-946b283e013a, invocation_id=7bb55bb6-6a82-46b8-9f87-5277e4405e22, invocation_timestamp=2020-07-12T17:59:15.959Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7bb55bb6-6a82-46b8-9f87-5277e4405e22, session_timestamp=2020-07-12T17:59:15.959Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:16,192Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b1d5e220-909f-401e-99ef-f4c251dfb52b, invocation_id=0437f1f3-2cda-4947-a960-f26093c7f041, invocation_timestamp=2020-07-12T17:59:14.650Z, origin=Only For Testing, session_id=0437f1f3-2cda-4947-a960-f26093c7f041, session_timestamp=2020-07-12T17:59:14.650Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:16,192Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b1d5e220-909f-401e-99ef-f4c251dfb52b, invocation_id=0437f1f3-2cda-4947-a960-f26093c7f041, invocation_timestamp=2020-07-12T17:59:14.650Z, origin=Only For Testing, session_id=0437f1f3-2cda-4947-a960-f26093c7f041, session_timestamp=2020-07-12T17:59:14.650Z, thread-id=226, tx_id=590AF939E1969D1F26526E0FD1EB4448DAE44B4BF48B4300E914E48FDEF9361F}
[INFO ] 2020-07-12T17:59:16,209Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-12T17:59:16,239Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-12T17:59:16,245Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-12T18:00:34,848Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-12T18:00:35,320Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T18:00:38,116Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T18:00:40,946Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-12T18:00:40,971Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-12T18:00:40,972Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T18:00:41,921Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T18:00:41,954Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-12T18:00:42,859Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T18:00:42,870Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T18:00:42,870Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-12T18:00:43,144Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T18:00:43,166Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T18:00:43,876Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-12T18:00:44,410Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T18:00:44,421Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T18:00:44,477Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T18:00:44,478Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-12T18:00:44,478Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-12T18:00:45,779Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T18:00:45,779Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-12T18:00:45,922Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T18:00:45,922Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-12T18:00:46,008Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T18:00:46,008Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-12T18:00:46,074Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-12T18:00:46,074Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T18:00:46,292Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:46,346Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T18:00:46,444Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-12T18:00:46,737Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T18:00:46,737Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-12T18:00:46,781Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T18:00:46,856Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-12T18:00:46,856Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-12T18:00:46,900Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:46,900Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-12T18:00:46,911Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:46,911Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-12T18:00:46,911Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:46,911Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:46,944Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-12T18:00:46,986Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:46,986Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T18:00:46,997Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:46,997Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T18:00:46,997Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:46,997Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-12T18:00:46,997Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:47,008Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:47,008Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-12T18:00:47,030Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:47,030Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T18:00:47,052Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-12T18:00:47,096Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T18:00:47,096Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-12T18:00:47,096Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T18:00:47,111Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-12T18:00:47,111Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-12T18:00:47,121Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:47,131Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-12T18:00:47,131Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:47,131Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-12T18:00:47,132Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:47,132Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:47,132Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-12T18:00:47,165Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:47,165Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T18:00:47,176Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:47,176Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T18:00:47,176Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:47,176Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T18:00:47,176Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:47,176Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-12T18:00:47,176Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-12T18:00:47,177Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:47,177Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-12T18:00:49,954Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-12T18:00:49,976Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T18:00:49,986Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-12T18:00:49,987Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-12T18:00:49,999Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T18:00:50,063Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-12T18:00:50,074Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-12T18:00:50,173Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-12T18:00:58,129Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-180032.372\nodes\0\cordapps] {}
[INFO ] 2020-07-12T18:00:58,140Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T18:00:58,163Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T18:00:58,654Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T18:01:00,096Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T18:01:00,352Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T18:01:00,485Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T18:01:00,664Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T18:01:00,664Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T18:01:01,791Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T18:00:32.218Z
      epoch=1
  } {}
[INFO ] 2020-07-12T18:01:08,229Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:08,237Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-180032.372\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:08,237Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:08,293Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:08,438Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:08,447Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:11,876Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:12,879Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:12,882Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:12,889Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:12,889Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:13,041Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:13,110Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T18:01:13,149Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T18:01:13,149Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T18:01:13,609Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-12T18:01:13,629Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T18:01:13,630Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576873629) {}
[INFO ] 2020-07-12T18:01:13,640Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T18:01:13,912Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576873629) {}
[INFO ] 2020-07-12T18:01:14,057Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T18:01:14,081Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T18:01:14,084Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T18:01:14,103Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576873629) {}
[INFO ] 2020-07-12T18:01:14,139Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T18:01:14,198Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EF5646196E3726519F1B2D4F7A6C6EE9EA757D32861139BCF968A3572D399EBB uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T18:01:14,215Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-12T18:01:14,220Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-12T18:01:14,881Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576873629) {}
[INFO ] 2020-07-12T18:01:14,929Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576873629) {}
[INFO ] 2020-07-12T18:01:14,932Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T18:01:14,933Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576873629) {}
[INFO ] 2020-07-12T18:01:14,933Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T18:01:15,000Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-180032.372\nodes\1\cordapps] {}
[INFO ] 2020-07-12T18:01:15,002Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T18:01:15,002Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T18:01:15,263Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T18:01:15,314Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T18:01:15,316Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T18:01:15,319Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T18:01:15,393Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T18:01:15,393Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T18:01:15,399Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T18:00:32.218Z
      epoch=1
  } {}
[INFO ] 2020-07-12T18:01:16,205Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,208Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-180032.372\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,208Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,235Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,241Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,241Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,396Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,406Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,408Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,412Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,412Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,489Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:16,496Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T18:01:16,500Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T18:01:16,500Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T18:01:16,698Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T18:01:16,700Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T18:01:16,743Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T18:01:16,743Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576876743) {}
[INFO ] 2020-07-12T18:01:16,745Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T18:01:16,753Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576876743) {}
[INFO ] 2020-07-12T18:01:16,762Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T18:01:16,762Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T18:01:16,763Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T18:01:16,776Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576876743) {}
[INFO ] 2020-07-12T18:01:16,782Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T18:01:16,894Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EF5646196E3726519F1B2D4F7A6C6EE9EA757D32861139BCF968A3572D399EBB uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T18:01:16,929Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576876743) {}
[INFO ] 2020-07-12T18:01:16,946Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576873629) {}
[INFO ] 2020-07-12T18:01:16,952Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T18:01:16,999Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576876743) {}
[INFO ] 2020-07-12T18:01:17,004Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T18:01:17,041Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576876743) {}
[INFO ] 2020-07-12T18:01:17,041Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T18:01:17,042Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576876743) {}
[INFO ] 2020-07-12T18:01:17,042Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T18:01:17,108Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200712-180032.372\nodes\2\cordapps] {}
[INFO ] 2020-07-12T18:01:17,109Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2020-07-12T18:01:17,109Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2020-07-12T18:01:17,342Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200712-180032.372/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2020-07-12T18:01:17,429Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-12T18:01:17,430Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-12T18:01:17,433Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-12T18:01:17,497Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-12T18:01:17,498Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-12T18:01:17,503Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-12T18:00:32.218Z
      epoch=1
  } {}
[INFO ] 2020-07-12T18:01:18,449Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,452Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200712-180032.372\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,452Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,479Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,485Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,485Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,604Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,614Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,616Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,620Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:18,620Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:19,320Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-12T18:01:19,331Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-12T18:01:19,336Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T18:01:19,336Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T18:01:19,504Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-12T18:01:19,506Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-12T18:01:19,552Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-12T18:01:19,552Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576879552) {}
[INFO ] 2020-07-12T18:01:19,554Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T18:01:19,563Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576879552) {}
[INFO ] 2020-07-12T18:01:19,572Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-12T18:01:19,573Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-12T18:01:19,573Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-12T18:01:19,585Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576879552) {}
[INFO ] 2020-07-12T18:01:19,591Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T18:01:19,634Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EF5646196E3726519F1B2D4F7A6C6EE9EA757D32861139BCF968A3572D399EBB uploader=app filename=carinsurance Contract {}
[INFO ] 2020-07-12T18:01:19,648Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576879552) {}
[INFO ] 2020-07-12T18:01:19,653Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594576873629) {}
[INFO ] 2020-07-12T18:01:19,655Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-12T18:01:19,670Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576879552) {}
[INFO ] 2020-07-12T18:01:19,672Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T18:01:19,686Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594576876743) {}
[INFO ] 2020-07-12T18:01:19,689Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-12T18:01:19,703Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576879552) {}
[INFO ] 2020-07-12T18:01:19,704Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-12T18:01:19,719Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576879552) {}
[INFO ] 2020-07-12T18:01:19,719Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-12T18:01:19,720Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594576879552) {}
[INFO ] 2020-07-12T18:01:19,720Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-12T18:01:20,456Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3ba79984-daac-4a1f-8a25-b1311996267d, invocation_id=3319b60e-faab-4e96-83b8-63310dea2bcf, invocation_timestamp=2020-07-12T18:01:19.781Z, origin=Only For Testing, session_id=3319b60e-faab-4e96-83b8-63310dea2bcf, session_timestamp=2020-07-12T18:01:19.781Z, thread-id=226}
[WARN ] 2020-07-12T18:01:20,456Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.examples.workinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3ba79984-daac-4a1f-8a25-b1311996267d, invocation_id=3319b60e-faab-4e96-83b8-63310dea2bcf, invocation_timestamp=2020-07-12T18:01:19.781Z, origin=Only For Testing, session_id=3319b60e-faab-4e96-83b8-63310dea2bcf, session_timestamp=2020-07-12T18:01:19.781Z, thread-id=226}
[INFO ] 2020-07-12T18:01:21,117Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3ba79984-daac-4a1f-8a25-b1311996267d, invocation_id=3319b60e-faab-4e96-83b8-63310dea2bcf, invocation_timestamp=2020-07-12T18:01:19.781Z, origin=Only For Testing, session_id=3319b60e-faab-4e96-83b8-63310dea2bcf, session_timestamp=2020-07-12T18:01:19.781Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:21,117Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3ba79984-daac-4a1f-8a25-b1311996267d, invocation_id=3319b60e-faab-4e96-83b8-63310dea2bcf, invocation_timestamp=2020-07-12T18:01:19.781Z, origin=Only For Testing, session_id=3319b60e-faab-4e96-83b8-63310dea2bcf, session_timestamp=2020-07-12T18:01:19.781Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:21,352Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3ba79984-daac-4a1f-8a25-b1311996267d, invocation_id=3319b60e-faab-4e96-83b8-63310dea2bcf, invocation_timestamp=2020-07-12T18:01:19.781Z, origin=Only For Testing, session_id=3319b60e-faab-4e96-83b8-63310dea2bcf, session_timestamp=2020-07-12T18:01:19.781Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:21,853Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=181dc375-962f-4920-a6f2-ffe541c0937e, invocation_id=f13c8a12-e768-4d99-9e37-6f907ebee112, invocation_timestamp=2020-07-12T18:01:21.761Z, origin=O=Mock Company 1, L=London, C=GB, session_id=f13c8a12-e768-4d99-9e37-6f907ebee112, session_timestamp=2020-07-12T18:01:21.761Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:21,937Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=181dc375-962f-4920-a6f2-ffe541c0937e, invocation_id=f13c8a12-e768-4d99-9e37-6f907ebee112, invocation_timestamp=2020-07-12T18:01:21.761Z, origin=O=Mock Company 1, L=London, C=GB, session_id=f13c8a12-e768-4d99-9e37-6f907ebee112, session_timestamp=2020-07-12T18:01:21.761Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:21,948Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=181dc375-962f-4920-a6f2-ffe541c0937e, invocation_id=f13c8a12-e768-4d99-9e37-6f907ebee112, invocation_timestamp=2020-07-12T18:01:21.761Z, origin=O=Mock Company 1, L=London, C=GB, session_id=f13c8a12-e768-4d99-9e37-6f907ebee112, session_timestamp=2020-07-12T18:01:21.761Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:21,963Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=181dc375-962f-4920-a6f2-ffe541c0937e, invocation_id=f13c8a12-e768-4d99-9e37-6f907ebee112, invocation_timestamp=2020-07-12T18:01:21.761Z, origin=O=Mock Company 1, L=London, C=GB, session_id=f13c8a12-e768-4d99-9e37-6f907ebee112, session_timestamp=2020-07-12T18:01:21.761Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:22,020Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3ba79984-daac-4a1f-8a25-b1311996267d, invocation_id=3319b60e-faab-4e96-83b8-63310dea2bcf, invocation_timestamp=2020-07-12T18:01:19.781Z, origin=Only For Testing, session_id=3319b60e-faab-4e96-83b8-63310dea2bcf, session_timestamp=2020-07-12T18:01:19.781Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:22,020Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3ba79984-daac-4a1f-8a25-b1311996267d, invocation_id=3319b60e-faab-4e96-83b8-63310dea2bcf, invocation_timestamp=2020-07-12T18:01:19.781Z, origin=Only For Testing, session_id=3319b60e-faab-4e96-83b8-63310dea2bcf, session_timestamp=2020-07-12T18:01:19.781Z, thread-id=226, tx_id=EB8E9832A8B37AFFF35343CB42824BC6D1156D49784FEE3EF63FEB27CA9542FA}
[INFO ] 2020-07-12T18:01:22,048Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-12T18:01:22,078Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-12T18:01:22,085Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
