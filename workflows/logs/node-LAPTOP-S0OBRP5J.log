[INFO ] 2020-07-16T10:57:48,561Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-16T10:57:49,168Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-16T10:57:51,361Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-16T10:57:53,342Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-16T10:57:53,357Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-16T10:57:53,477Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-16T10:57:54,132Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T10:57:54,165Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-16T10:57:54,783Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T10:57:54,783Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T10:57:54,783Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-16T10:57:55,012Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T10:57:55,023Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-16T10:57:55,688Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-16T10:57:56,081Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-16T10:57:56,092Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-16T10:57:56,146Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-16T10:57:56,147Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-16T10:57:56,147Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-16T10:57:57,302Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T10:57:57,302Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-16T10:57:57,411Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T10:57:57,411Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-16T10:57:57,510Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T10:57:57,510Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-16T10:57:57,576Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T10:57:57,576Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T10:57:57,826Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:57,880Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-16T10:57:57,967Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-16T10:57:58,264Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-16T10:57:58,264Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-16T10:57:58,318Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-16T10:57:58,406Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-16T10:57:58,406Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-16T10:57:58,450Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,461Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-16T10:57:58,474Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,474Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-16T10:57:58,474Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,475Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,512Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-16T10:57:58,580Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,580Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-16T10:57:58,613Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,613Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-16T10:57:58,613Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,613Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-16T10:57:58,613Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,624Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,624Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-16T10:57:58,656Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,667Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-16T10:57:58,689Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-16T10:57:58,755Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-16T10:57:58,755Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-16T10:57:58,755Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-16T10:57:58,766Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-16T10:57:58,766Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-16T10:57:58,777Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,788Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-16T10:57:58,788Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,788Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-16T10:57:58,788Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,788Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,799Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-16T10:57:58,832Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,832Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-16T10:57:58,832Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,832Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-16T10:57:58,832Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,832Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-16T10:57:58,833Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,833Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-16T10:57:58,833Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T10:57:58,833Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:57:58,833Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-16T10:58:01,401Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T10:58:01,401Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T10:58:01,401Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-16T10:58:01,401Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T10:58:01,412Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-16T10:58:01,423Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-16T10:58:01,423Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-16T10:58:01,448Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-16T10:58:07,374Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200716-105746.345\nodes\0\cordapps] {}
[INFO ] 2020-07-16T10:58:07,387Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/0/cordapps/contracts-0.1h2.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/0/cordapps/workflows-0.1h2.jar, rootPackageName=null) {}
[INFO ] 2020-07-16T10:58:07,411Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/0/cordapps/contracts-0.1h2.jar {}
[INFO ] 2020-07-16T10:58:07,807Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/0/cordapps/workflows-0.1h2.jar {}
[INFO ] 2020-07-16T10:58:09,333Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-16T10:58:09,638Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-16T10:58:09,730Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-16T10:58:09,896Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-16T10:58:09,897Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-16T10:58:10,794Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-16T10:57:46.239Z
      epoch=1
  } {}
[INFO ] 2020-07-16T10:58:17,506Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:17,510Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200716-105746.345\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:17,510Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:17,563Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:17,701Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:17,709Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:20,543Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:21,465Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:21,467Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:21,473Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:21,473Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:21,591Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:21,669Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-16T10:58:21,717Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-16T10:58:21,717Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-16T10:58:22,154Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-16T10:58:22,170Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-16T10:58:22,170Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897102170) {}
[INFO ] 2020-07-16T10:58:22,176Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-16T10:58:22,422Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897102170) {}
[INFO ] 2020-07-16T10:58:22,492Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-16T10:58:22,511Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-16T10:58:22,513Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-16T10:58:22,528Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897102170) {}
[INFO ] 2020-07-16T10:58:22,573Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T10:58:22,616Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B2B051D1948DD6B6DD29A8BC5290E8FCAA0793593DCEA34261761FD00AADC846 uploader=app filename=workinsurance Contract {}
[INFO ] 2020-07-16T10:58:22,627Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-16T10:58:22,631Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-16T10:58:23,220Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897102170) {}
[INFO ] 2020-07-16T10:58:23,260Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897102170) {}
[INFO ] 2020-07-16T10:58:23,263Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T10:58:23,264Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897102170) {}
[INFO ] 2020-07-16T10:58:23,264Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T10:58:23,279Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200716-105746.345\nodes\1\cordapps] {}
[INFO ] 2020-07-16T10:58:23,280Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/1/cordapps/contracts-0.1h2.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/1/cordapps/workflows-0.1h2.jar, rootPackageName=null) {}
[INFO ] 2020-07-16T10:58:23,280Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/1/cordapps/contracts-0.1h2.jar {}
[INFO ] 2020-07-16T10:58:23,483Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/1/cordapps/workflows-0.1h2.jar {}
[INFO ] 2020-07-16T10:58:23,522Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-16T10:58:23,523Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-16T10:58:23,526Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-16T10:58:23,599Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-16T10:58:23,599Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-16T10:58:23,604Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-16T10:57:46.239Z
      epoch=1
  } {}
[INFO ] 2020-07-16T10:58:24,404Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,408Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200716-105746.345\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,408Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,434Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,439Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,439Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,599Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,610Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,612Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,616Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,616Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,709Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:24,718Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-16T10:58:24,723Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T10:58:24,723Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T10:58:24,948Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T10:58:24,950Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-16T10:58:25,001Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-16T10:58:25,001Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897105001) {}
[INFO ] 2020-07-16T10:58:25,004Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-16T10:58:25,013Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897105001) {}
[INFO ] 2020-07-16T10:58:25,022Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-16T10:58:25,023Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-16T10:58:25,023Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-16T10:58:25,036Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897105001) {}
[INFO ] 2020-07-16T10:58:25,043Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T10:58:25,082Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B2B051D1948DD6B6DD29A8BC5290E8FCAA0793593DCEA34261761FD00AADC846 uploader=app filename=workinsurance Contract {}
[INFO ] 2020-07-16T10:58:25,095Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897105001) {}
[INFO ] 2020-07-16T10:58:25,101Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897102170) {}
[INFO ] 2020-07-16T10:58:25,103Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-16T10:58:25,121Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897105001) {}
[INFO ] 2020-07-16T10:58:25,124Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-16T10:58:25,144Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897105001) {}
[INFO ] 2020-07-16T10:58:25,144Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T10:58:25,145Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897105001) {}
[INFO ] 2020-07-16T10:58:25,145Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T10:58:25,163Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200716-105746.345\nodes\2\cordapps] {}
[INFO ] 2020-07-16T10:58:25,165Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/2/cordapps/contracts-0.1h2.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/2/cordapps/workflows-0.1h2.jar, rootPackageName=null) {}
[INFO ] 2020-07-16T10:58:25,165Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/2/cordapps/contracts-0.1h2.jar {}
[INFO ] 2020-07-16T10:58:25,404Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-105746.345/nodes/2/cordapps/workflows-0.1h2.jar {}
[INFO ] 2020-07-16T10:58:25,442Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-16T10:58:25,443Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-16T10:58:25,457Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-16T10:58:25,515Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-16T10:58:25,515Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-16T10:58:25,518Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-16T10:57:46.239Z
      epoch=1
  } {}
[INFO ] 2020-07-16T10:58:26,167Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,170Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200716-105746.345\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,170Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,194Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,201Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,201Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,806Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,815Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,816Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,820Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,820Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,877Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T10:58:26,884Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-16T10:58:26,886Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T10:58:26,886Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T10:58:27,022Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T10:58:27,024Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-16T10:58:27,071Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-16T10:58:27,071Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897107071) {}
[INFO ] 2020-07-16T10:58:27,074Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-16T10:58:27,082Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897107071) {}
[INFO ] 2020-07-16T10:58:27,091Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-16T10:58:27,092Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-16T10:58:27,092Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-16T10:58:27,104Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897107071) {}
[INFO ] 2020-07-16T10:58:27,111Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T10:58:27,151Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B2B051D1948DD6B6DD29A8BC5290E8FCAA0793593DCEA34261761FD00AADC846 uploader=app filename=workinsurance Contract {}
[INFO ] 2020-07-16T10:58:27,164Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897107071) {}
[INFO ] 2020-07-16T10:58:27,168Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897102170) {}
[INFO ] 2020-07-16T10:58:27,171Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-16T10:58:27,184Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897107071) {}
[INFO ] 2020-07-16T10:58:27,186Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-16T10:58:27,199Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897105001) {}
[INFO ] 2020-07-16T10:58:27,201Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-16T10:58:27,212Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897107071) {}
[INFO ] 2020-07-16T10:58:27,214Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-16T10:58:27,225Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897107071) {}
[INFO ] 2020-07-16T10:58:27,225Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T10:58:27,226Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897107071) {}
[INFO ] 2020-07-16T10:58:27,226Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-16T10:58:27,560Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
[WARN ] 2020-07-16T10:58:27,560Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.examples.workinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
[ERROR] 2020-07-16T10:58:27,731Z [Mock network] amqp.SerializationOutput. - Serialization failed direction="Serialize", type="net.corda.examples.workinsurance.states.ClaimStatus", msg="Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.", ClassChain="data(net.corda.core.contracts.ContractState) -> java.util.List<net.corda.examples.workinsurance.states.Claim> -> net.corda.examples.workinsurance.states.ClaimStatus" {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
[ERROR] 2020-07-16T10:58:27,741Z [Mock network] transactions.TransactionBuilder. - Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable. [errorCode=cslewg, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/cslewg] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.
	at net.corda.serialization.internal.amqp.SerializationOutput.serialize(SerializationOutput.kt:54) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.amqp.AbstractAMQPSerializationScheme.serialize(AMQPSerializationScheme.kt:161) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.asCurrent(SerializationAPI.kt:85) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl.serialize(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize(SerializationAPI.kt:324) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize$default(SerializationAPI.kt:323) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt:148) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.LazyMappedList.get(InternalUtils.kt:597) ~[corda-core-4.5-RC02.jar:?]
	at java.util.AbstractList$Itr.next(AbstractList.java:358) ~[?:1.8.0_201]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:425) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getAvailableComponentHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:292) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupsMerkleRoots$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:277) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:265) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getMerkleTree(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.getId(WireTransaction.kt:78) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransactionInternal(WireTransaction.kt:200) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransaction(WireTransaction.kt:103) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:206) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:186) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:65) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-16T10:58:27,741Z [Mock network] corda.flow. - Flow raised an error: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
[INFO ] 2020-07-16T10:58:27,748Z [Mock network] statemachine.StaffedFlowHospital. - Flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, timestamp: 2020-07-16T10:58:27.280Z, entityType: Invocation, sessionId=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, timestamp: 2020-07-16T10:58:27.280Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1h2, corDappHash=8835198135ADB6E7B4376FDF6ED6C566A9A5A171AA7D8DE52F35C6D628B2035C), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A6E4847C1B4A17D8316B087CD846F397ABEF59BA3B63963DDDDCFBA329F22EF9), errorState=Clean, numberOfSuspends=0), flowLogic=net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator@25d59e40, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=ec095150-e54d-41c0-bbb8-a2d8ff209c60) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
[INFO ] 2020-07-16T10:58:27,754Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.
	at net.corda.serialization.internal.amqp.SerializationOutput.serialize(SerializationOutput.kt:54) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.amqp.AbstractAMQPSerializationScheme.serialize(AMQPSerializationScheme.kt:161) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.asCurrent(SerializationAPI.kt:85) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl.serialize(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize(SerializationAPI.kt:324) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize$default(SerializationAPI.kt:323) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt:148) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.LazyMappedList.get(InternalUtils.kt:597) ~[corda-core-4.5-RC02.jar:?]
	at java.util.AbstractList$Itr.next(AbstractList.java:358) ~[?:1.8.0_201]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:425) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getAvailableComponentHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:292) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupsMerkleRoots$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:277) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:265) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getMerkleTree(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.getId(WireTransaction.kt:78) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransactionInternal(WireTransaction.kt:200) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransaction(WireTransaction.kt:103) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:206) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:186) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:65) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-16T10:58:27,759Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.
	at net.corda.serialization.internal.amqp.SerializationOutput.serialize(SerializationOutput.kt:54) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.amqp.AbstractAMQPSerializationScheme.serialize(AMQPSerializationScheme.kt:161) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.asCurrent(SerializationAPI.kt:85) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl.serialize(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize(SerializationAPI.kt:324) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize$default(SerializationAPI.kt:323) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt:148) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.LazyMappedList.get(InternalUtils.kt:597) ~[corda-core-4.5-RC02.jar:?]
	at java.util.AbstractList$Itr.next(AbstractList.java:358) ~[?:1.8.0_201]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:425) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getAvailableComponentHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:292) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupsMerkleRoots$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:277) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:265) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getMerkleTree(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.getId(WireTransaction.kt:78) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransactionInternal(WireTransaction.kt:200) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransaction(WireTransaction.kt:103) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:206) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:186) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:65) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-16T10:58:27,783Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] errored, dumping all transitions:

 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.511Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9beaaa0e-055b-4617-9dad-bcec1ca378ca], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, timestamp: 2020-07-16T10:58:27.280Z, entityType: Invocation, sessionId=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, timestamp: 2020-07-16T10:58:27.280Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1h2, corDappHash=8835198135ADB6E7B4376FDF6ED6C566A9A5A171AA7D8DE52F35C6D628B2035C), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A6E4847C1B4A17D8316B087CD846F397ABEF59BA3B63963DDDDCFBA329F22EF9), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9aa0d18])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9aa0d18])
    SignalFlowHasStarted(flowId=[9beaaa0e-055b-4617-9dad-bcec1ca378ca])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9aa0d18]
    []


 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.761Z
  Event: Error(exception=java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-07-16T10:58:27.424Z
    2020-07-16T10:58:27.746Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3604286669891448585, exception=java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.767Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.772Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-16T10:58:27.746Z
    2020-07-16T10:58:27.772Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
[WARN ] 2020-07-16T10:58:27,783Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable. [errorCode=cslewg, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/cslewg] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.
	at net.corda.serialization.internal.amqp.SerializationOutput.serialize(SerializationOutput.kt:54) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.amqp.AbstractAMQPSerializationScheme.serialize(AMQPSerializationScheme.kt:161) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.asCurrent(SerializationAPI.kt:85) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl.serialize(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize(SerializationAPI.kt:324) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize$default(SerializationAPI.kt:323) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt:148) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.LazyMappedList.get(InternalUtils.kt:597) ~[corda-core-4.5-RC02.jar:?]
	at java.util.AbstractList$Itr.next(AbstractList.java:358) ~[?:1.8.0_201]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:425) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getAvailableComponentHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:292) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupsMerkleRoots$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:277) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:265) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getMerkleTree(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.getId(WireTransaction.kt:78) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransactionInternal(WireTransaction.kt:200) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransaction(WireTransaction.kt:103) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:206) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:186) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:65) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-16T10:58:27,786Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
[WARN ] 2020-07-16T10:58:27,827Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] errored, dumping all transitions:

 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.511Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9beaaa0e-055b-4617-9dad-bcec1ca378ca], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, timestamp: 2020-07-16T10:58:27.280Z, entityType: Invocation, sessionId=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, timestamp: 2020-07-16T10:58:27.280Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1h2, corDappHash=8835198135ADB6E7B4376FDF6ED6C566A9A5A171AA7D8DE52F35C6D628B2035C), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A6E4847C1B4A17D8316B087CD846F397ABEF59BA3B63963DDDDCFBA329F22EF9), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9aa0d18])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9aa0d18])
    SignalFlowHasStarted(flowId=[9beaaa0e-055b-4617-9dad-bcec1ca378ca])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9aa0d18]
    []


 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.761Z
  Event: Error(exception=java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2020-07-16T10:58:27.424Z
    2020-07-16T10:58:27.746Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3604286669891448585, exception=java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.767Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.772Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-16T10:58:27.746Z
    2020-07-16T10:58:27.772Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [9beaaa0e-055b-4617-9dad-bcec1ca378ca] ---
  Timestamp: 2020-07-16T10:58:27.822Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3604286669891448585)], sessions=[], senderUUID=ec095150-e54d-41c0-bbb8-a2d8ff209c60)
    CreateTransaction
    RemoveCheckpoint(id=[9beaaa0e-055b-4617-9dad-bcec1ca378ca])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=9beaaa0e-055b-4617-9dad-bcec1ca378ca)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[9beaaa0e-055b-4617-9dad-bcec1ca378ca], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3604286669891448585, exception=java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, timestamp: 2020-07-16T10:58:27.280Z, entityType: Invocation, sessionId=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, timestamp: 2020-07-16T10:58:27.280Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, classToInitiateWith=class net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=workflows-0.1h2, corDappHash=8835198135ADB6E7B4376FDF6ED6C566A9A5A171AA7D8DE52F35C6D628B2035C), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A6E4847C1B4A17D8316B087CD846F397ABEF59BA3B63963DDDDCFBA329F22EF9), errorState=Errored(errors=[FlowError(errorId=-3604286669891448585, exception=java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator@25d59e40, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=ec095150-e54d-41c0-bbb8-a2d8ff209c60))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-16T10:58:27.772Z
    2020-07-16T10:58:27.783Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
[WARN ] 2020-07-16T10:58:27,827Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable. [errorCode=cslewg, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/cslewg] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9beaaa0e-055b-4617-9dad-bcec1ca378ca, invocation_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, invocation_timestamp=2020-07-16T10:58:27.280Z, origin=Only For Testing, session_id=cf55f5e0-95bc-4bc7-b077-fa66498f79b8, session_timestamp=2020-07-16T10:58:27.280Z, thread-id=226}
java.io.NotSerializableException: Class "class net.corda.examples.workinsurance.states.ClaimStatus" is not on the whitelist or annotated with @CordaSerializable.
	at net.corda.serialization.internal.amqp.SerializationOutput.serialize(SerializationOutput.kt:54) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.amqp.AbstractAMQPSerializationScheme.serialize(AMQPSerializationScheme.kt:161) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl$serialize$1.invoke(SerializationScheme.kt:80) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationFactory.asCurrent(SerializationAPI.kt:85) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.serialization.internal.SerializationFactoryImpl.serialize(SerializationScheme.kt:130) ~[corda-serialization-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize(SerializationAPI.kt:324) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.serialization.SerializationAPIKt.serialize$default(SerializationAPI.kt:323) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt:148) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.TransactionUtilsKt$createComponentGroups$serialize$1.invoke(TransactionUtils.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.internal.LazyMappedList.get(InternalUtils.kt:597) ~[corda-core-4.5-RC02.jar:?]
	at java.util.AbstractList$Itr.next(AbstractList.java:358) ~[?:1.8.0_201]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:425) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$availableComponentHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getAvailableComponentHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:292) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupsMerkleRoots$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupsMerkleRoots$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:277) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$groupHashes$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getGroupHashes$core(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:265) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction$merkleTree$2.invoke(WireTransaction.kt:50) ~[corda-core-4.5-RC02.jar:?]
	at kotlin.SynchronizedLazyImpl.getValue(LazyJVM.kt:74) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.transactions.WireTransaction.getMerkleTree(WireTransaction.kt) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.getId(WireTransaction.kt:78) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransactionInternal(WireTransaction.kt:200) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.WireTransaction.toLedgerTransaction(WireTransaction.kt:103) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:206) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext(TransactionBuilder.kt:186) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:140) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:622) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:630) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:65) ~[main/:?]
	at net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator.call(IssueInsuranceFlow.java:18) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-16T10:58:27,857Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-16T10:58:27,878Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-16T10:58:27,883Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-16T11:00:45,013Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\workflows ... {}
[INFO ] 2020-07-16T11:00:45,411Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-16T11:00:48,518Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-16T11:00:50,652Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-16T11:00:50,673Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-16T11:00:50,674Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-16T11:00:51,882Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T11:00:51,936Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-16T11:00:53,012Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T11:00:53,023Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T11:00:53,034Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-16T11:00:53,363Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T11:00:53,385Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-16T11:00:54,124Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-16T11:00:54,672Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-16T11:00:54,672Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-16T11:00:54,737Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-16T11:00:54,738Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-16T11:00:54,738Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-16T11:00:56,406Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T11:00:56,406Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2020-07-16T11:00:56,570Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T11:00:56,570Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2020-07-16T11:00:56,680Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T11:00:56,680Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2020-07-16T11:00:56,768Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-16T11:00:56,768Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T11:00:56,983Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,027Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-16T11:00:57,104Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2020-07-16T11:00:57,354Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-16T11:00:57,354Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2020-07-16T11:00:57,387Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-16T11:00:57,453Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:annotationProcessor {}
[INFO ] 2020-07-16T11:00:57,453Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2020-07-16T11:00:57,486Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,497Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2020-07-16T11:00:57,497Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,497Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2020-07-16T11:00:57,497Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,497Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,530Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2020-07-16T11:00:57,574Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,574Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-16T11:00:57,597Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,597Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-16T11:00:57,597Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,597Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2020-07-16T11:00:57,597Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,597Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,611Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2020-07-16T11:00:57,644Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,644Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-16T11:00:57,666Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2020-07-16T11:00:57,720Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-16T11:00:57,720Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2020-07-16T11:00:57,720Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-16T11:00:57,721Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:annotationProcessor {}
[INFO ] 2020-07-16T11:00:57,721Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2020-07-16T11:00:57,731Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,742Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2020-07-16T11:00:57,742Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,742Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2020-07-16T11:00:57,742Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,742Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,742Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2020-07-16T11:00:57,786Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,786Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-16T11:00:57,786Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,786Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-16T11:00:57,787Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,787Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-16T11:00:57,787Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,787Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2020-07-16T11:00:57,787Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2020-07-16T11:00:57,787Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:00:57,787Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2020-07-16T11:01:00,106Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-16T11:01:00,118Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T11:01:00,118Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2020-07-16T11:01:00,118Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-16T11:01:00,120Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-16T11:01:00,140Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\ISEP\MEI\2019-2020\TMDEI\workers-insurance\.gradle {}
[INFO ] 2020-07-16T11:01:00,140Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-16T11:01:00,175Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-16T11:01:07,267Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200716-110042.802\nodes\0\cordapps] {}
[INFO ] 2020-07-16T11:01:07,301Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/0/cordapps/contracts-0.1h2.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/0/cordapps/workflows-0.1h2.jar, rootPackageName=null) {}
[INFO ] 2020-07-16T11:01:07,340Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/0/cordapps/contracts-0.1h2.jar {}
[INFO ] 2020-07-16T11:01:07,962Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/0/cordapps/workflows-0.1h2.jar {}
[INFO ] 2020-07-16T11:01:10,275Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-16T11:01:10,671Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-16T11:01:10,789Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-16T11:01:10,966Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-16T11:01:10,981Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-16T11:01:11,987Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-16T11:00:42.679Z
      epoch=1
  } {}
[INFO ] 2020-07-16T11:01:18,349Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:18,355Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200716-110042.802\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:18,355Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:18,423Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:18,602Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:18,612Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:21,735Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:22,616Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:22,620Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:22,626Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:22,626Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:22,742Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:22,819Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-16T11:01:22,859Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-16T11:01:22,859Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-16T11:01:23,477Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-16T11:01:23,497Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-16T11:01:23,497Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897283497) {}
[INFO ] 2020-07-16T11:01:23,515Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-16T11:01:23,883Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897283497) {}
[INFO ] 2020-07-16T11:01:24,045Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-16T11:01:24,077Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-16T11:01:24,081Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-16T11:01:24,108Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897283497) {}
[INFO ] 2020-07-16T11:01:24,170Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T11:01:24,230Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=61ED6848BB9100976D0091B3283EF8161453CBBEB3710922C0720D29D41F387C uploader=app filename=workinsurance Contract {}
[INFO ] 2020-07-16T11:01:24,247Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-16T11:01:24,252Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-16T11:01:24,884Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897283497) {}
[INFO ] 2020-07-16T11:01:24,924Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897283497) {}
[INFO ] 2020-07-16T11:01:24,927Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T11:01:24,927Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897283497) {}
[INFO ] 2020-07-16T11:01:24,927Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T11:01:24,958Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200716-110042.802\nodes\1\cordapps] {}
[INFO ] 2020-07-16T11:01:24,959Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/1/cordapps/contracts-0.1h2.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/1/cordapps/workflows-0.1h2.jar, rootPackageName=null) {}
[INFO ] 2020-07-16T11:01:24,959Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/1/cordapps/contracts-0.1h2.jar {}
[INFO ] 2020-07-16T11:01:25,159Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/1/cordapps/workflows-0.1h2.jar {}
[INFO ] 2020-07-16T11:01:25,204Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-16T11:01:25,205Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-16T11:01:25,207Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-16T11:01:25,261Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-16T11:01:25,261Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-16T11:01:25,265Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-16T11:00:42.679Z
      epoch=1
  } {}
[INFO ] 2020-07-16T11:01:26,053Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,057Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200716-110042.802\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,057Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,095Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,099Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,099Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,242Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,257Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,258Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,262Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,263Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,345Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:26,353Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-16T11:01:26,357Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T11:01:26,357Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T11:01:26,527Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T11:01:26,529Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-16T11:01:26,582Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-16T11:01:26,582Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897286582) {}
[INFO ] 2020-07-16T11:01:26,585Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-16T11:01:26,595Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897286582) {}
[INFO ] 2020-07-16T11:01:26,608Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-16T11:01:26,608Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-16T11:01:26,608Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-16T11:01:26,637Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897286582) {}
[INFO ] 2020-07-16T11:01:26,643Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T11:01:26,668Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=61ED6848BB9100976D0091B3283EF8161453CBBEB3710922C0720D29D41F387C uploader=app filename=workinsurance Contract {}
[INFO ] 2020-07-16T11:01:26,680Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897286582) {}
[INFO ] 2020-07-16T11:01:26,701Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897283497) {}
[INFO ] 2020-07-16T11:01:26,703Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-16T11:01:26,717Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897286582) {}
[INFO ] 2020-07-16T11:01:26,719Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-16T11:01:26,735Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897286582) {}
[INFO ] 2020-07-16T11:01:26,735Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T11:01:26,736Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897286582) {}
[INFO ] 2020-07-16T11:01:26,736Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T11:01:26,754Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200716-110042.802\nodes\2\cordapps] {}
[INFO ] 2020-07-16T11:01:26,755Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/2/cordapps/contracts-0.1h2.jar, rootPackageName=null), RestrictedURL(url=file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/2/cordapps/workflows-0.1h2.jar, rootPackageName=null) {}
[INFO ] 2020-07-16T11:01:26,755Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/2/cordapps/contracts-0.1h2.jar {}
[INFO ] 2020-07-16T11:01:26,961Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/ISEP/MEI/2019-2020/TMDEI/workers-insurance/workflows/build/mock-network/20200716-110042.802/nodes/2/cordapps/workflows-0.1h2.jar {}
[INFO ] 2020-07-16T11:01:27,006Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-16T11:01:27,007Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-16T11:01:27,008Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-16T11:01:27,058Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimInitiator to initiate net.corda.examples.workinsurance.flows.InsuranceClaimFlow$InsuranceClaimResponder (version 1) {}
[INFO ] 2020-07-16T11:01:27,058Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceInitiator to initiate net.corda.examples.workinsurance.flows.IssueInsuranceFlow$IssueInsuranceResponder (version 1) {}
[INFO ] 2020-07-16T11:01:27,062Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-16T11:00:42.679Z
      epoch=1
  } {}
[INFO ] 2020-07-16T11:01:27,696Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,699Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200716-110042.802\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,699Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,724Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,729Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,729Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,896Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,906Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,907Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,912Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,912Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,981Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-16T11:01:27,986Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-16T11:01:27,989Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T11:01:27,989Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T11:01:28,796Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.examples.workinsurance.schema.InsuranceSchemaFamily, version=1)] {}
[INFO ] 2020-07-16T11:01:28,798Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-16T11:01:28,839Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-16T11:01:28,839Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897288839) {}
[INFO ] 2020-07-16T11:01:28,841Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-16T11:01:28,849Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897288839) {}
[INFO ] 2020-07-16T11:01:28,859Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-16T11:01:28,859Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-16T11:01:28,859Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-16T11:01:28,871Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897288839) {}
[INFO ] 2020-07-16T11:01:28,877Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T11:01:28,933Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=61ED6848BB9100976D0091B3283EF8161453CBBEB3710922C0720D29D41F387C uploader=app filename=workinsurance Contract {}
[INFO ] 2020-07-16T11:01:28,948Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897288839) {}
[INFO ] 2020-07-16T11:01:28,952Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1594897283497) {}
[INFO ] 2020-07-16T11:01:28,955Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-16T11:01:28,970Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897288839) {}
[INFO ] 2020-07-16T11:01:28,971Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-16T11:01:28,984Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1594897286582) {}
[INFO ] 2020-07-16T11:01:28,985Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-16T11:01:28,997Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897288839) {}
[INFO ] 2020-07-16T11:01:28,998Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-16T11:01:29,007Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897288839) {}
[INFO ] 2020-07-16T11:01:29,007Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-16T11:01:29,007Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1594897288839) {}
[INFO ] 2020-07-16T11:01:29,007Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-16T11:01:29,401Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4bf53c42-28bb-4b9a-a039-304fda47666c, invocation_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, invocation_timestamp=2020-07-16T11:01:29.057Z, origin=Only For Testing, session_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, session_timestamp=2020-07-16T11:01:29.057Z, thread-id=226}
[WARN ] 2020-07-16T11:01:29,402Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.examples.workinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4bf53c42-28bb-4b9a-a039-304fda47666c, invocation_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, invocation_timestamp=2020-07-16T11:01:29.057Z, origin=Only For Testing, session_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, session_timestamp=2020-07-16T11:01:29.057Z, thread-id=226}
[INFO ] 2020-07-16T11:01:30,171Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4bf53c42-28bb-4b9a-a039-304fda47666c, invocation_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, invocation_timestamp=2020-07-16T11:01:29.057Z, origin=Only For Testing, session_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, session_timestamp=2020-07-16T11:01:29.057Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,171Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4bf53c42-28bb-4b9a-a039-304fda47666c, invocation_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, invocation_timestamp=2020-07-16T11:01:29.057Z, origin=Only For Testing, session_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, session_timestamp=2020-07-16T11:01:29.057Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,389Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4bf53c42-28bb-4b9a-a039-304fda47666c, invocation_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, invocation_timestamp=2020-07-16T11:01:29.057Z, origin=Only For Testing, session_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, session_timestamp=2020-07-16T11:01:29.057Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,698Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=d8274750-3274-40f2-a8c4-db86daaf684b, invocation_id=b25bb4da-ddff-469f-8c3b-30129314711f, invocation_timestamp=2020-07-16T11:01:30.591Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b25bb4da-ddff-469f-8c3b-30129314711f, session_timestamp=2020-07-16T11:01:30.591Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,785Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=d8274750-3274-40f2-a8c4-db86daaf684b, invocation_id=b25bb4da-ddff-469f-8c3b-30129314711f, invocation_timestamp=2020-07-16T11:01:30.591Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b25bb4da-ddff-469f-8c3b-30129314711f, session_timestamp=2020-07-16T11:01:30.591Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,797Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=d8274750-3274-40f2-a8c4-db86daaf684b, invocation_id=b25bb4da-ddff-469f-8c3b-30129314711f, invocation_timestamp=2020-07-16T11:01:30.591Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b25bb4da-ddff-469f-8c3b-30129314711f, session_timestamp=2020-07-16T11:01:30.591Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,815Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=d8274750-3274-40f2-a8c4-db86daaf684b, invocation_id=b25bb4da-ddff-469f-8c3b-30129314711f, invocation_timestamp=2020-07-16T11:01:30.591Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b25bb4da-ddff-469f-8c3b-30129314711f, session_timestamp=2020-07-16T11:01:30.591Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,887Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4bf53c42-28bb-4b9a-a039-304fda47666c, invocation_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, invocation_timestamp=2020-07-16T11:01:29.057Z, origin=Only For Testing, session_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, session_timestamp=2020-07-16T11:01:29.057Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,887Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4bf53c42-28bb-4b9a-a039-304fda47666c, invocation_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, invocation_timestamp=2020-07-16T11:01:29.057Z, origin=Only For Testing, session_id=03f7ca2a-a99a-4189-9292-3b12315e8bfe, session_timestamp=2020-07-16T11:01:29.057Z, thread-id=226, tx_id=5D8F2AAF919C49B72714DF26707C37A5DB4B1E669C06174A6E9E434A53736684}
[INFO ] 2020-07-16T11:01:30,933Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-16T11:01:31,040Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-16T11:01:31,138Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
